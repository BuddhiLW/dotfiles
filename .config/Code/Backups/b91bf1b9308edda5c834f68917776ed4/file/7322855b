file:///home/buddhilw/PP/facti/linfo-fresh/routes/pagina.js {"mtime":1674128734713,"ctime":1674128734713,"size":5635,"etag":"3a1ecaq725qo","orphaned":false,"typeId":""}
const express = require('express');
const router = express.Router();
const AutenticacaoService = require('../services/autenticacao');
const LogService = require('../services/log');
const UsuarioService = require('../services/usuario');
const EntidadeService = require('../services/entidade');
const AnoFiscalService = require('../services/anoFiscal');
const NaturezaDeDispendioService = require('../services/naturezaDeDispendio');
const ProgramaPrioritarioService = require('../services/programaPrioritario');
const BoletoService = require('../services/boleto');
const UsuarioIncentivadaService = require('../services/usuarioIncentivada');
const SolicitacaoService = require('../services/solicitacao');
const PrestacaoDeContasElaboracaoService = require('../services/prestacao-de-contas-elaboracao');


/**
 * @api {get} /:_modulo/ Solicita a página principal rederizada de _modulo
 * @apiName pagina
 * @apiGroup pagina
 * @apiPermission Ver matriz de permissões
 * @apiParam {String} _modulo String _modulo utilizada para identificar a qual
 *  módulo a busca se refere
 *
 */
router.get('/:_modulo/', AutenticacaoService.autorizarRequisicao,
  LogService.registrarRequisicao, async (req, res) => {
    try {
      // uma vez que a verificação de permissões ocorreu anteriormente:
      switch(req.params._modulo) {
        case('PrestacoesDeContas') : {
          return res.render('prestacoes-de-contas/base.ejs');
        }
      }
    } catch (e) { /* istanbul ignore next */
      LogService.error(`Erro ao renderizar página para o módulo ${req.params._modulo}: ${e}`,
        {path: req.originalUrl, authPayload: req.authPayload, body: req.body});
      /* istanbul ignore next */
      return res.status(404).json({erro: e.message});
    }
  }
);

/**
 * @api {get} /:_modulo/:_id Solicita uma pagina rederizada relativa ao _id
 * @apiName pagina
 * @apiGroup pagina
 * @apiPermission Ver matriz de permissões
 * @apiParam {String} _modulo String _modulo utilizada para identificar a qual
 *  módulo a busca se refere
 * @apiParam {String} _parametro String _parametro utilizada para buscar as
 *  informações existentes nos inúmeros modelos de dados disponíveis
 *
 */
router.get('/:_modulo/:_id', AutenticacaoService.autorizarRequisicao,
  LogService.registrarRequisicao, async (req, res) => {
    try {

      switch(req.params._modulo) {
        case('Usuario') : {
          const doc = await UsuarioService.buscarPorId(req.params._id, true);
          return (req.authPayload.grupos.includes('Usuário de Coordenadora'))
            ?  (doc.empresa?._id?.toString() == req.authPayload?.idEntidade)
              ? res.render('pagina-usuario', { doc: doc })
              : res.status(404).json({})
            : res.render('pagina-usuario', { doc: doc });
        }
        case('Entidade') :
          return res.render('pagina-entidade/base',
            { doc: await EntidadeService.buscarPorId(req.params._id) });
        case('AnoFiscal') :
          return res.render('pagina-ano-fiscal',
            { doc: await AnoFiscalService.buscarPorId(req.params._id) });
        case('NaturezaDeDispendio') :
          return res.render('pagina-natureza-de-dispendio',
            { doc: await NaturezaDeDispendioService.buscarPorId(req.params._id) });
        case('ProgramaPrioritario') : {
          const doc = await ProgramaPrioritarioService.buscarPorIds([req.params._id],true);
          return (req.authPayload.grupos.includes('Usuário de Coordenadora') &&
            !req.authPayload.grupos.includes('Usuário de Executora'))
            ?  (req.authPayload.ppis.map(p => p._id).includes(doc[0]._id?.toString()))
              ? res.render('pagina-programa-prioritario', { doc: doc[0] })
              : res.status(404).json({})
            : res.render('pagina-programa-prioritario', { doc: doc[0] });
        }
        case('Boleto') :
          return res.render('pagina-boleto',
            { doc: await BoletoService.buscarPorId(req.params._id) });
        case('UsuarioIncentivada') :
          return res.render('pagina-usuario-incentivada',
            { doc: await UsuarioIncentivadaService.buscarPorId(req.params._id) });
        case('Solicitacao') : {
          const doc = await SolicitacaoService.buscarPorId(req.params._id);
          return (req.authPayload.grupos.some(g => [
            'Usuário de Coordenadora',
            'Usuário de Executora'
          ].includes(g)))
            ? (doc.cnpj == req.authPayload.cnpjEntidade)
              ? res.render('pagina-solicitacao', { doc: doc })
              : res.status(404).json({})
            : res.render('pagina-solicitacao', { doc: doc });
        }
        case('PrestacoesDeContas') : {
          const doc = await PrestacaoDeContasElaboracaoService.buscarPorId(req.params._id);
          return (req.authPayload.grupos.includes('Usuário de Coordenadora'))
            ?  (req.authPayload?.ppis?.map(p => p._id).includes(doc.programaPrioritarioPopulado?._id?.toString()))
              ? res.render('pagina-prestacao-de-contas/base', { doc })
              : res.status(404).json({})
            : res.render('pagina-prestacao-de-contas/base', { doc });
        }
        default :
          /* istanbul ignore next */
          return res.status(404).json({});
      }
    } catch (e) { /* istanbul ignore next */
      LogService.error(`Erro ao renderizar página para o módulo ${req.params._modulo}: ${e}`,
        {path: req.originalUrl, authPayload: req.authPayload, body: req.body});
      /* istanbul ignore next */
      return res.status(404).json({erro: e.message});
    }
  }
);
module.exports = router;
