#!/usr/bin/sh

warn=15
crit=5
dunstid=82147924
file=/tmp/dwmblocks-power
sfx="/home/pcache/dotfiles/.other/notification2.mp3"

barh=19     # dwm bar height
pad=2       # padding from top and bottom

bath="$(( barh - (2*pad) ))" # battery height
batw=8                       # battery width
bd=1                         # battery border
bdcol_normal="#BBBBBB"       # border color
bdcol_charging="#00FFFF"
bgcol_normal="#303030"       # battery bg color
bgcol_charging="#000000"
midw=4                       # small top rect width

# Runs when battery level is in range (warn;100>
norm () {
    # Log battery level
    echo "$1" >"$file"
    chmod 600 -- "$file"
}

# Runs when battery level is in range (crit;warn> and discharging
warn () {
    [ "$status" != "Charging" ] && {
        prev="$(cat -- "$file")"
        [ "$prev" -gt "$warn" ] && warn_enter "$1"
        echo "$1" >"$file"
        chmod 600 -- "$file"
    }
}

# Runs when battery level is in range <0;crit> and discharging
crit () {
    [ "$status" != "Charging" ] && {
        prev="$(cat -- "$file")"
        [ "$prev" -gt "$1" ] && crit_enter "$1"
        echo "$1" >"$file"
        chmod 600 -- "$file"
    }
}

# Runs when battery level crosses from (warn;100> to (crit;warn>
warn_enter () {
    remaining="$(acpi | grep -o '[0-9:]* remaining')"
    dunstify -r "$dunstid" -i battery -u critical "Battery Low [$1%]" "$remaining"
    mpv --no-terminal -- "$sfx" >/dev/null 2>&1 &
}

# Runs when battery level crosses from (crit;warn> to <0;crit> and lower
crit_enter () {
    remaining="$(acpi | grep -o '[0-9:]* remaining')"
    dunstify -r "$dunstid" -i battery -u critical "Battery Low [$1%]" "$remaining"
    mpv --no-terminal -- "$sfx" >/dev/null 2>&1 &
}

output=
for path in /sys/class/power_supply/BAT?; do
    capacity="$(cat -- "$path/capacity")"
    [ -z "$capacity" ] && exit
    status="$(cat -- "$path/status")"
    if [ "$status" = "Charging" ]; then
	    bdcol="$bdcol_charging"
	    bgcol="$bgcol_charging"
    else
	    bdcol="$bdcol_normal"
	    bgcol="$bgcol_normal"
    fi

    output="^c$bdcol^"

    # Draw base battery
    output="$output^r0,$(( pad + bd )),$batw,$(( barh - (2*pad) - bd ))^"
    output="$output^r$(( (batw - midw) / 2 )),$pad,$midw,$(( barh - (2*pad) - bd ))^"
    if [ "$status" = "Charging" ]; then
        col="#00FFFF"
    else
        red="$(( 255 - (255 * capacity / 100) ))"
        green="$(( capacity * 255 / 100 ))"
        col="#$(printf "%02x" "$red")$(printf "%02x" "$green")"00
    fi
    output="$output^c$col^^r$bd,$(( pad + (2*bd) )),$(( batw - (2*bd) )),$(( bath - (3*bd) ))^"

    # Cover not filled parts with bgcol
    fillh="$(( (bath - (3*bd)) * (100 - capacity) / 100 ))"
    output="$output^c$bgcol^^r$bd,$(( pad + (2*bd) )),$(( batw - (2*bd) )),$fillh^"
    output="$output^c$bdcol^"

    # Compare the percentage number to find the right range
    if [ "$capacity" -le "$crit" ]; then
        crit "$capacity"
    elif [ "$capacity" -le "$warn" ]; then
        warn "$capacity"
    else
        norm "$capacity"
    fi

    echo "$output^f$(( batw + 2 ))^$capacity%"
    exit
done
