#!/usr/bin/sh

# This script extracts current GPU temperature from the 'nvidia-smi' command output.
# Then it formats it for dwmblocks to display.
# There's more functionality, like setting thresholds for warnings and custom
# commands hooked to specific events.
#
# DEPENDENCIES
# - nvidia-smi
# - libnotify
# - perl
# - mpv (optional, for playing the SFX)
# - mpc (optional, requires an MPD_PORT variable)

command -v "nvidia-smi" >/dev/null 2>&1 || exit

WARN=80
CRIT=94
DUNSTID=71098266
FILE="/tmp/gputemp"
SFX="$HOME/dotfiles/.other/alarm.wav"

# Runs when temp is in range <-∞;WARN)
norm () {
    # Log temperature
    echo "$1" > "$FILE"
    chmod 600 -- "$FILE"
}

# Runs when temp is in range <WARN;CRIT)
warn () {
    # Read temperature
    prev="$(cat "$FILE")"

    # If crossed, trigger warn_enter
    [ "$prev" -lt "$WARN" ] && warn_enter "$1"

    # Log temperature
    echo "$1" > "$FILE"
    chmod 600 -- "$FILE"
}

# Runs when temp is in range <CRIT;+∞)
crit () {
    # Read temperature
    prev="$(cat "$FILE")"

    # If crossed, trigger warn_enter
    [ "$prev" -lt "$CRIT" ] && crit_enter "$1"

    # Log temperature
    echo "$1" > "$FILE"
    chmod 600 -- "$FILE"
}

# Runs when temperature crosses from <-∞;WARN) to <WARN;CRIT)
warn_enter () {
    topcmd="$(ps -eo pcpu,comm | sort -r | sed -n '2s/.* //p')"
    dunstify -r "$DUNSTID" -i cpu -u critical "GPU Temp High! [$1°C]" "<u>Top Process</u>: $topcmd" >/dev/null 2>&1
}

# Runs when temperature crosses from <WARN;CRIT) to <CRIT;+∞)
crit_enter () {
    topcmd="$(ps -eo pcpu,comm | sort -r | sed -n '2s/.* //p')"
    dunstify -r "$DUNSTID" -i cpu -u critical "GPU Temp Critical! [$1°C]" "<u>Top Process</u>: $topcmd" >/dev/null 2>&1
    mpc --port="$MPD_PORT" pause >/dev/null 2>&1
    mpv --no-terminal -- "$SFX" >/dev/null 2>&1 & 
}

# Extract the highest temperature from sensors output
# This command probably needs to be tweaked for each
# machine separately, as the output will likely vary.
temp="$(nvidia-smi -q -d TEMPERATURE | awk '/GPU Current Temp\s+: [0-9]+ C$/ {print $5}')"

# Trim superfluous decimal zero
text="$temp°C"

# Default temp color
col='^c#FBFF99^'

# Compare the number to find the right range
if [ "$temp" -ge "$WARN" ]; then
    if [ "$temp" -lt "$CRIT" ]; then
        warn "$temp"
        col='^c#FBFF33^'
        text="$text HOT!"
    else
        crit "$temp"
        # Blink effect
        seconds="$(date +%S)"
        case "$((${seconds##0} % 2))" in # trim leading 0s from seconds so they don't get interpreted like octal
            0) col='^c#B9FF00^' ;;
            *) col='^c#FFFFFF^' ;;
        esac
        text="$text DANGER!"
    fi
else
    norm "$temp"
fi

# Apply the right icon
if [ "$temp" -lt 30 ]; then
    icon=
elif [ "$temp" -lt 50 ]; then
    icon=
elif [ "$temp" -lt 70 ]; then
    icon=
elif [ "$temp" -lt 90 ]; then
    icon=
else
    icon=
fi

echo "^c#868822^$icon^f3^$col$text"
