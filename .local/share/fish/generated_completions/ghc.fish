# ghc
# Autogenerated from man page /usr/share/man/man1/ghc.1.gz
complete -c ghc -o dynamic-too -d 'Build dynamic object files as well as static object files during compilation'
complete -c ghc -o fasm -d 'Use the native code generator'
complete -c ghc -o fbyte-code -d 'Generate byte-code'
complete -c ghc -o fexternal-dynamic-refs -d 'Generate code for linking against dynamic libraries'
complete -c ghc -o fllvm -d 'Compile using the LLVM code generator'
complete -c ghc -o fno-code -d 'Omit code generation'
complete -c ghc -o fobject-code -d 'Generate object code'
complete -c ghc -o fPIC -d 'Generate position-independent code (where available)'
complete -c ghc -o fPIE -d 'Generate code for a position-independent executable (where available)'
complete -c ghc -o fwrite-interface -d 'Always write interface files'
complete -c ghc -o dcmm-lint -d 'C-- pass sanity checking'
complete -c ghc -o dcore-lint -d 'Turn on internal sanity checking'
complete -c ghc -o ddump-asm -d 'Dump final assembly'
complete -c ghc -o ddump-asm-expanded -d 'Dump the result of the synthetic instruction expansion pass'
complete -c ghc -o ddump-asm-liveness -d 'Dump assembly augmented with register liveness'
complete -c ghc -o ddump-asm-native -d 'Dump initial assembly'
complete -c ghc -o ddump-asm-regalloc -d 'Dump the result of register allocation'
complete -c ghc -o ddump-asm-regalloc-stages -d 'Dump the build/spill stages of the -fregs-graph register allocator'
complete -c ghc -o ddump-asm-stats -d 'Dump statistics from the register allocator'
complete -c ghc -o ddump-bcos -d 'Dump interpreter byte code'
complete -c ghc -o ddump-cfg-weights -d 'Dump the assumed weights of the CFG'
complete -c ghc -o ddump-cmm -d 'Dump the final C-- output'
complete -c ghc -o ddump-cmm-caf -d 'Dump the results of the C-- CAF analysis pass'
complete -c ghc -o ddump-cmm-cbe -d 'Dump the results of common block elimination'
complete -c ghc -o ddump-cmm-cfg -d 'Dump the results of the C-- control flow optimisation pass'
complete -c ghc -o ddump-cmm-cps -d 'Dump the results of the CPS pass'
complete -c ghc -o ddump-cmm-from-stg -d 'Dump STG-to-C-- output'
complete -c ghc -o ddump-cmm-info -d 'Dump the results of the C-- info table augmentation pass'
complete -c ghc -o ddump-cmm-opt -d 'Dump the results of C-- to C-- optimising passes'
complete -c ghc -o ddump-cmm-proc -d 'Dump the results of proc-point analysis'
complete -c ghc -o ddump-cmm-procmap -d 'Dump the results of the C-- proc-point map pass'
complete -c ghc -o ddump-cmm-raw -d 'Dump raw C--'
complete -c ghc -o ddump-cmm-sink -d 'Dump the results of the C-- sinking pass'
complete -c ghc -o ddump-cmm-sp -d 'Dump the results of the C-- stack layout pass'
complete -c ghc -o ddump-cmm-split -d 'Dump the results of the C-- proc-point splitting pass'
complete -c ghc -o ddump-cmm-switch -d 'Dump the results of switch lowering passes'
complete -c ghc -o ddump-cmm-verbose -d 'Write output from main C-- pipeline passes to files'
complete -c ghc -o ddump-cmm-verbose-by-proc -d 'Show output from main C-- pipeline passes (grouped by proc)'
complete -c ghc -o ddump-core-stats -d 'Print a one-line summary of the size of the Core program at the end of the op…'
complete -c ghc -o ddump-cpr-signatures -d 'Dump CPR signatures'
complete -c ghc -o ddump-cpranal -d 'Dump CPR analysis output'
complete -c ghc -o ddump-cse -d 'Dump CSE output'
complete -c ghc -o ddump-deriv -d 'Dump deriving output'
complete -c ghc -o ddump-ds -d 'Dump desugarer output'
complete -c ghc -o ddump-ec-trace -d 'Trace exhaustiveness checker'
complete -c ghc -o ddump-file-prefix -d 'Set the prefix of the filenames used for debugging output'
complete -c ghc -o ddump-foreign -d 'Dump foreign export stubs'
complete -c ghc -o ddump-hie -d 'Dump the hie file syntax tree'
complete -c ghc -o ddump-hpc -d 'An alias for -ddump-ticked'
complete -c ghc -o ddump-if-trace -d 'Trace interface files'
complete -c ghc -o ddump-inlinings -d 'Dump inlinings performed by the simplifier'
complete -c ghc -o ddump-json -d 'Dump error messages as JSON documents'
complete -c ghc -o ddump-llvm -d 'Dump LLVM intermediate code'
complete -c ghc -o ddump-mod-map -d 'Dump the state of the module mapping database'
complete -c ghc -o ddump-occur-anal -d 'Dump occurrence analysis output'
complete -c ghc -o ddump-opt-cmm -d 'Dump the results of C-- to C-- optimising passes'
complete -c ghc -o ddump-parsed -d 'Dump parse tree'
complete -c ghc -o ddump-parsed-ast -d 'Dump parser output as a syntax tree'
complete -c ghc -o ddump-prep -d 'Dump prepared core'
complete -c ghc -o ddump-rn -d 'Dump renamer output'
complete -c ghc -o ddump-rn-ast -d 'Dump renamer output as a syntax tree'
complete -c ghc -o ddump-rn-stats -d 'Renamer stats'
complete -c ghc -o ddump-rn-trace -d 'Trace renamer'
complete -c ghc -o ddump-rtti -d 'Trace runtime type inference'
complete -c ghc -o ddump-rule-firings -d 'Dump rule firing info'
complete -c ghc -o ddump-rule-rewrites -d 'Dump detailed rule firing info'
complete -c ghc -o ddump-rules -d 'Dump rewrite rules'
complete -c ghc -o ddump-simpl -d 'Dump final simplifier output'
complete -c ghc -o ddump-simpl-iterations -d 'Dump output from each simplifier iteration'
complete -c ghc -o ddump-simpl-stats -d 'Dump simplifier stats'
complete -c ghc -o ddump-spec -d 'Dump specialiser output'
complete -c ghc -o ddump-splices -d 'Dump TH spliced expressions, and what they evaluate to'
complete -c ghc -o ddump-stg -d 'Show CoreToStg output'
complete -c ghc -o ddump-stg-final -d 'Show output of last STG pass'
complete -c ghc -o ddump-stg-unarised -d 'Show unarised STG'
complete -c ghc -o ddump-str-signatures -d 'Dump strictness signatures'
complete -c ghc -o ddump-stranal -d 'Dump strictness analyser output'
complete -c ghc -o ddump-tc -d 'Dump typechecker output'
complete -c ghc -o ddump-tc-ast -d 'Dump typechecker output as a syntax tree'
complete -c ghc -o ddump-tc-trace -d 'Trace typechecker'
complete -c ghc -o ddump-ticked -d 'Dump the code instrumented by HPC (hpc)'
complete -c ghc -o ddump-timings -d 'Dump per-pass timing and allocation statistics'
complete -c ghc -o ddump-to-file -d 'Dump to files instead of stdout'
complete -c ghc -o ddump-types -d 'Dump type signatures'
complete -c ghc -o ddump-verbose-inlinings -d 'Dump all considered inlinings'
complete -c ghc -o ddump-worker-wrapper -d 'Dump worker-wrapper output'
complete -c ghc -o dfaststring-stats -d 'Show statistics for fast string usage when finished'
complete -c ghc -o dhex-word-literals -d 'Print values of type Word# in hexadecimal'
complete -c ghc -o dinitial-unique -d 'Start UniqSupply allocation from â¨sâ©'
complete -c ghc -o dinline-check -d 'Dump information about inlining decisions'
complete -c ghc -o dlinear-core-lint -d 'Turn on internal sanity checking'
complete -c ghc -o dno-debug-output -d 'Suppress unsolicited debugging output'
complete -c ghc -o dno-typeable-binds -d 'Don\\(aqt generate bindings for Typeable methods'
complete -c ghc -o dppr-case-as-let -d 'Print single alternative case expressions as strict lets'
complete -c ghc -o dppr-cols -d 'Set the width of debugging output.  For example -dppr-cols200'
complete -c ghc -o dppr-debug -d 'Turn on debug printing (more verbose)'
complete -c ghc -o dppr-user-length -d 'Set the depth for printing expressions in error msgs'
complete -c ghc -o drule-check -d 'Dump information about potential rule application'
complete -c ghc -o dshow-passes -d 'Print out each pass name as it happens'
complete -c ghc -o dstg-lint -d 'STG pass sanity checking'
complete -c ghc -o dsuppress-all -d 'In dumps, suppress everything (except for uniques) that is suppressible'
complete -c ghc -o dsuppress-coercions -d 'Suppress the printing of coercions in Core dumps to make them shorter'
complete -c ghc -o dsuppress-idinfo -d 'Suppress extended information about identifiers where they are bound'
complete -c ghc -o dsuppress-module-prefixes -d 'Suppress the printing of module qualification prefixes'
complete -c ghc -o dsuppress-stg-free-vars -d 'Suppress the printing of closure free variable lists in STG output'
complete -c ghc -o dsuppress-ticks -d 'Suppress "ticks" in the pretty-printer output'
complete -c ghc -o dsuppress-timestamps -d 'Suppress timestamps in dumps'
complete -c ghc -o dsuppress-type-applications -d 'Suppress type applications'
complete -c ghc -o dsuppress-type-signatures -d 'Suppress type signatures'
complete -c ghc -o dsuppress-unfoldings -d 'Suppress the printing of the stable unfolding of a variable at its binding si…'
complete -c ghc -o dsuppress-uniques -d 'Suppress the printing of uniques in debug output (easier to use diff)'
complete -c ghc -o dsuppress-var-kinds -d 'Suppress the printing of variable kinds'
complete -c ghc -o dth-dec-file -d 'Dump evaluated TH declarations into *. th. hs files'
complete -c ghc -o dunique-increment -d 'Set the increment for the generated Unique\\(aqs to â¨iâ©'
complete -c ghc -o dverbose-core2core -d 'Show output from each core-to-core pass'
complete -c ghc -o dverbose-stg2stg -d 'Show output from each STG-to-STG pass'
complete -c ghc -o falignment-sanitisation -d 'Compile with alignment checks for all info table dereferences'
complete -c ghc -o fcatch-bottoms -d 'Add a default error alternative to case expressions without a default alterna…'
complete -c ghc -o fllvm-fill-undef-with-garbage -d 'Intruct LLVM to fill dead STG registers with garbage'
complete -c ghc -o fproc-alignment -d 'Align functions at given boundary'
complete -c ghc -s g -d 'Produce DWARF debug information in compiled object files'
complete -c ghc -o cpp -d 'Run the C pre-processor on Haskell source files'
complete -c ghc -o 'Dâ¨symbolâ©' -d 'Define a symbol in the C pre-processor'
complete -c ghc -o 'Iâ¨dirâ©' -d 'Add â¨dirâ© to the directory search list for #include files'
complete -c ghc -o 'Uâ¨symbolâ©' -d 'Undefine a symbol in the C pre-processor'
complete -c ghc -s i -d 'Empty the import directory list'
complete -c ghc -o 'iâ¨dirâ©*' -d 'add â¨dirâ©, â¨dir2â©, etc.  to import path'
complete -c ghc -o fbreak-on-error -d 'Break on uncaught exceptions and errors'
complete -c ghc -o fbreak-on-exception -d 'Break on any exception thrown'
complete -c ghc -o fghci-hist-size -d 'Set the number of entries GHCi keeps for :history.  See ghci-debugger'
complete -c ghc -o fghci-leak-check -d '(Debugging only) check for space leaks when loading new modules in GHCi'
complete -c ghc -o flocal-ghci-history -d 'Use current directory for the GHCi command history file . ghci-history'
complete -c ghc -o fno-it -d 'No longer set the special variable it'
complete -c ghc -o fprint-bind-result -d 'Turn on printing of binding results in GHCi'
complete -c ghc -o fprint-evld-with-show -d 'Instruct :print to use Show instances where possible'
complete -c ghc -o fshow-loaded-modules -d 'Show the names of modules that GHCi loaded after a :load command'
complete -c ghc -o ghci-script -d 'Read additional . ghci files'
complete -c ghc -o ignore-dot-ghci -d 'Disable reading of . ghci files'
complete -c ghc -o interactive-print -d 'Select the function to use for printing evaluated expressions in GHCi'
complete -c ghc -l show-iface -d 'See modes'
complete -c ghc -o ddump-hi -d 'Dump the new interface to stdout'
complete -c ghc -o ddump-hi-diffs -d 'Show the differences vs.  the old interface'
complete -c ghc -o ddump-minimal-imports -d 'Dump a minimal set of imports'
complete -c ghc -o keep-hc-file -d 'Retain intermediate . hc files'
complete -c ghc -o keep-hi-files -d 'Retain intermediate . hi files (the default)'
complete -c ghc -o keep-hscpp-file -d 'Retain intermediate . hscpp files'
complete -c ghc -o keep-llvm-file -d 'Retain intermediate LLVM . ll files.  Implies -fllvm'
complete -c ghc -o keep-o-files -d 'Retain intermediate . o files (the default)'
complete -c ghc -o keep-s-file -d 'Retain intermediate . s files'
complete -c ghc -o keep-tmp-files -d 'Retain all intermediate temporary files'
complete -c ghc -o XAllowAmbiguousTypes -d 'Allow the user to write ambiguous types, and the type inference engine to inf…'
complete -c ghc -o XApplicativeDo -d 'Enable Applicative do-notation desugaring'
complete -c ghc -o XArrows -d 'Enable arrow notation extension'
complete -c ghc -o XBangPatterns -d 'Enable bang patterns'
complete -c ghc -o XBinaryLiterals -d 'Enable support for binary literals'
complete -c ghc -o XBlockArguments -d 'Allow do blocks and other constructs as function arguments'
complete -c ghc -o XCApiFFI -d 'Enable the CAPI calling convention'
complete -c ghc -o XConstrainedClassMethods -d 'Enable constrained class methods'
complete -c ghc -o XConstraintKinds -d 'Enable a kind of constraints'
complete -c ghc -o XCPP -d 'Enable the C preprocessor'
complete -c ghc -o XCUSKs -d 'Enable detection of complete user-supplied kind signatures'
complete -c ghc -o XDataKinds -d 'Enable datatype promotion'
complete -c ghc -o XDatatypeContexts -d 'Allow contexts on data types'
complete -c ghc -o XDefaultSignatures -d 'Enable default signatures'
complete -c ghc -o XDeriveAnyClass -d 'Enable deriving for any class'
complete -c ghc -o XDeriveDataTypeable -d 'Enable deriving for the Data class'
complete -c ghc -o XDeriveFoldable -d 'Enable deriving for the Foldable class.  Implied by DeriveTraversable'
complete -c ghc -o XDeriveFunctor -d 'Enable deriving for the Functor class.  Implied by DeriveTraversable'
complete -c ghc -o XDeriveGeneric -d 'Enable deriving for the Generic class'
complete -c ghc -o XDeriveLift -d 'Enable deriving for the Lift class'
complete -c ghc -o XDeriveTraversable -d 'Enable deriving for the Traversable class'
complete -c ghc -o XDerivingStrategies -d 'Enables deriving strategies'
complete -c ghc -o XDerivingVia -d 'Enable deriving instances via types of the same runtime representation'
complete -c ghc -o XDisambiguateRecordFields -d 'Enable record field disambiguation.  Implied by RecordWildCards'
complete -c ghc -o XDuplicateRecordFields -d 'Allow definition of record types with identically-named fields'
complete -c ghc -o XEmptyCase -d 'Allow empty case alternatives'
complete -c ghc -o XEmptyDataDecls -d 'Allow definition of empty data types'
complete -c ghc -o XEmptyDataDeriving -d 'Allow deriving instances of standard type classes for empty data types'
complete -c ghc -o XExistentialQuantification -d 'Enable liberalised type synonyms'
complete -c ghc -o XExplicitForAll -d 'Enable explicit universal quantification'
complete -c ghc -o XExplicitNamespaces -d 'Enable using the keyword type to specify the namespace of entries in imports …'
complete -c ghc -o XExtendedDefaultRules -d 'Use GHCi\\(aqs extended default rules in a normal module'
complete -c ghc -o XFlexibleContexts -d 'Enable flexible contexts'
complete -c ghc -o XFlexibleInstances -d 'Enable flexible instances.  Implies TypeSynonymInstances'
complete -c ghc -o XForeignFunctionInterface -d 'Enable foreign function interface'
complete -c ghc -o XFunctionalDependencies -d 'Enable functional dependencies.  Implies MultiParamTypeClasses'
complete -c ghc -o XGADTs -d 'Enable generalised algebraic data types'
complete -c ghc -o XGADTSyntax -d 'Enable generalised algebraic data type syntax'
complete -c ghc -o XGeneralisedNewtypeDeriving -d 'Enable newtype deriving'
complete -c ghc -o XGeneralizedNewtypeDeriving -d 'Enable newtype deriving'
complete -c ghc -o XGHCForeignImportPrim -d 'Enable prim calling convention.  Intended for internal use only'
complete -c ghc -o XHaskell2010 -d 'Use the Haskell 2010 language variant'
complete -c ghc -o XHaskell98 -d 'Use the Haskell 98 language variant'
complete -c ghc -o XHexFloatLiterals -d 'Enable support for hexadecimal floating point literals'
complete -c ghc -o XImplicitParams -d 'Enable Implicit Parameters'
complete -c ghc -o XImportQualifiedPost -d 'ImportQualifiedPost allows the syntax import M qualified'
complete -c ghc -o XImpredicativeTypes -d 'Enable impredicative types.  Implies RankNTypes'
complete -c ghc -o XIncoherentInstances -d 'Enable incoherent instances.  Implies OverlappingInstances'
complete -c ghc -o XInstanceSigs -d 'Enable instance signatures'
complete -c ghc -o XInterruptibleFFI -d 'Enable interruptible FFI'
complete -c ghc -o XKindSignatures -d 'Enable kind signatures.  Implied by TypeFamilies and PolyKinds'
complete -c ghc -o XLambdaCase -d 'Enable lambda-case expressions'
complete -c ghc -o XLexicalNegation -d 'Use whitespace to determine whether the minus sign stands for negation or sub…'
complete -c ghc -o XLiberalTypeSynonyms -d 'Enable liberalised type synonyms'
complete -c ghc -o XLinearTypes -d 'Enable linear types'
complete -c ghc -o XMagicHash -d 'Allow # as a postfix modifier on identifiers'
complete -c ghc -o XMonadComprehensions -d 'Enable monad comprehensions'
complete -c ghc -o XMonadFailDesugaring -d 'Enable monadfail desugaring'
complete -c ghc -o XMonoLocalBinds -d 'Enable do not generalise local bindings.  Implied by TypeFamilies and GADTs'
complete -c ghc -o XMultiParamTypeClasses -d 'Enable multi parameter type classes.  Implied by FunctionalDependencies'
complete -c ghc -o XMultiWayIf -d 'Enable multi-way if-expressions'
complete -c ghc -o XNamedFieldPuns -d 'Enable record puns'
complete -c ghc -o XNamedWildCards -d 'Enable named wildcards'
complete -c ghc -o XNegativeLiterals -d 'Enable support for negative literals'
complete -c ghc -o XNoImplicitPrelude -d 'Don\\(aqt implicitly import Prelude.  Implied by RebindableSyntax'
complete -c ghc -o XNoMonomorphismRestriction -d 'Disable the monomorphism restriction'
complete -c ghc -o XNondecreasingIndentation -d 'Allow nested contexts to be at the same indentation level as its enclosing co…'
complete -c ghc -o XNoPatternGuards -d 'Disable pattern guards.  Implied by Haskell98'
complete -c ghc -o XNoTraditionalRecordSyntax -d 'Disable support for traditional record syntax (as supported by Haskell 98) C …'
complete -c ghc -o XNPlusKPatterns -d 'Enable support for n+k patterns.  Implied by Haskell98'
complete -c ghc -o XNullaryTypeClasses -d 'Deprecated, does nothing'
complete -c ghc -o XNumDecimals -d 'Enable support for \\(aqfractional\\(aq integer literals'
complete -c ghc -o XNumericUnderscores -d 'Enable support for numeric underscores'
complete -c ghc -o XOverlappingInstances -d 'Enable overlapping instances'
complete -c ghc -o XOverloadedLabels -d 'Enable overloaded labels'
complete -c ghc -o XOverloadedLists -d 'Enable overloaded lists'
complete -c ghc -o XOverloadedStrings -d 'Enable overloaded string literals'
complete -c ghc -o XPackageImports -d 'Enable package-qualified imports'
complete -c ghc -o XParallelListComp -d 'Enable parallel list comprehensions'
complete -c ghc -o XPartialTypeSignatures -d 'Enable partial type signatures'
complete -c ghc -o XPatternSynonyms -d 'Enable pattern synonyms'
complete -c ghc -o XPolyKinds -d 'Enable kind polymorphism.  Implies KindSignatures'
complete -c ghc -o XPostfixOperators -d 'Enable postfix operators'
complete -c ghc -o XQualifiedDo -d 'Enable qualified do-notation desugaring'
complete -c ghc -o XQuantifiedConstraints -d 'Allow forall quantifiers in constraints'
complete -c ghc -o XQuasiQuotes -d 'Enable quasiquotation'
complete -c ghc -o XRank2Types -d 'Enable rank-2 types.  Synonym for RankNTypes'
complete -c ghc -o XRankNTypes -d 'Enable rank-N types.  Implied by ImpredicativeTypes'
complete -c ghc -o XRebindableSyntax -d 'Employ rebindable syntax.  Implies NoImplicitPrelude'
complete -c ghc -o XRecordWildCards -d 'Enable record wildcards.  Implies DisambiguateRecordFields'
complete -c ghc -o XRecursiveDo -d 'Enable recursive do (mdo) notation'
complete -c ghc -o XRoleAnnotations -d 'Enable role annotations'
complete -c ghc -o XSafe -d 'Enable the Safe Haskell Safe mode'
complete -c ghc -o XScopedTypeVariables -d 'Enable lexically-scoped type variables'
complete -c ghc -o XStandaloneDeriving -d 'Enable standalone deriving'
complete -c ghc -o XStandaloneKindSignatures -d 'Allow the use of standalone kind signatures'
complete -c ghc -o XStarIsType -d 'Treat * as Data. Kind. Type'
complete -c ghc -o XStaticPointers -d 'Enable static pointers'
complete -c ghc -o XStrict -d 'Make bindings in the current module strict by default'
complete -c ghc -o XStrictData -d 'Enable default strict datatype fields'
complete -c ghc -o XTemplateHaskell -d 'Enable Template Haskell'
complete -c ghc -o XTemplateHaskellQuotes -d 'Enable quotation subset of Template Haskell'
complete -c ghc -o XTransformListComp -d 'Enable generalised list comprehensions'
complete -c ghc -o XTrustworthy -d 'Enable the Safe Haskell Trustworthy mode'
complete -c ghc -o XTupleSections -d 'Enable tuple sections'
complete -c ghc -o XTypeApplications -d 'Enable type application syntax in terms and types'
complete -c ghc -o XTypeFamilies -d 'Enable type families'
complete -c ghc -o XTypeFamilyDependencies -d 'Enable injective type families.  Implies TypeFamilies'
complete -c ghc -o XTypeInType -d 'Deprecated.  Enable kind polymorphism and datatype promotion'
complete -c ghc -o XTypeOperators -d 'Enable type operators.  Implies ExplicitNamespaces'
complete -c ghc -o XTypeSynonymInstances -d 'Enable type synonyms in instance heads.  Implied by FlexibleInstances'
complete -c ghc -o XUnboxedSums -d 'Enable unboxed sums'
complete -c ghc -o XUnboxedTuples -d 'Enable the use of unboxed tuple syntax'
complete -c ghc -o XUndecidableInstances -d 'Enable undecidable instances'
complete -c ghc -o XUndecidableSuperClasses -d 'Allow all superclass constraints, including those that may result in non-term…'
complete -c ghc -o XUnicodeSyntax -d 'Enable unicode syntax'
complete -c ghc -o XUnliftedFFITypes -d 'Enable unlifted FFI types'
complete -c ghc -o XUnliftedNewtypes -d 'Enable unlifted newtypes'
complete -c ghc -o XUnsafe -d 'Enable Safe Haskell Unsafe mode'
complete -c ghc -o XViewPatterns -d 'Enable view patterns'
complete -c ghc -s c -d 'Stop after generating object (. o) file'
complete -c ghc -o debug -d 'Use the debugging runtime'
complete -c ghc -o dylib-install-name -d 'Set the install name (via -install_name passed to Apple\\(aqs linker), specify…'
complete -c ghc -o dynamic -d 'Build dynamically-linked object files and executables'
complete -c ghc -o dynload -d 'Selects one of a number of modes for finding shared libraries at runtime'
complete -c ghc -o eventlog -d 'Enable runtime event tracing'
complete -c ghc -o fkeep-cafs -d 'Do not garbage-collect CAFs (top-level expressions) at runtime'
complete -c ghc -o flink-rts -d 'Link the runtime when generating a shared or static library'
complete -c ghc -o fno-embed-manifest -d 'Do not embed the manifest in the executable (Windows only)'
complete -c ghc -o fno-gen-manifest -d 'Do not generate a manifest file (Windows only)'
complete -c ghc -o fno-shared-implib -d 'Don\\(aqt generate an import library for a DLL (Windows only)'
complete -c ghc -o framework -d 'On Darwin/OS X/iOS only, link in the framework â¨nameâ©'
complete -c ghc -o framework-path -d 'On Darwin/OS X/iOS only, add â¨dirâ© to the list of directories searched fo…'
complete -c ghc -o fuse-rpaths -d 'Set the rpath based on -L flags'
complete -c ghc -o fwhole-archive-hs-libs -d 'When linking a binary executable, this inserts the flag -Wl,--whole-archive b…'
complete -c ghc -s L -d 'Add â¨dirâ© to the list of directories searched for libraries'
complete -c ghc -s l -d 'Link in library â¨libâ©'
complete -c ghc -o main-is -d 'Set main module and function'
complete -c ghc -o no-hs-main -d 'Don\\(aqt assume this program contains main'
complete -c ghc -o no-rtsopts-suggestions -d 'Don\\(aqt print RTS suggestions about linking with -rtsopts[=â¨none|some|all|…'
complete -c ghc -o package -d 'Expose package â¨pkgâ©'
complete -c ghc -o pie -d 'Instruct the linker to produce a position-independent executable'
complete -c ghc -o rdynamic -d 'This instructs the linker to add all symbols, not only used ones, to the dyna…'
complete -c ghc -o rtsopts -d 'Control whether the RTS behaviour can be tweaked via command-line flags and t…'
complete -c ghc -o shared -d 'Generate a shared library (as opposed to an executable)'
complete -c ghc -o split-sections -d 'Split sections for link-time dead-code stripping'
complete -c ghc -o static -d 'Use static Haskell libraries'
complete -c ghc -o staticlib -d 'Generate a standalone static library (as opposed to an executable)'
complete -c ghc -o threaded -d 'Use the threaded runtime'
complete -c ghc -o with-rtsopts -d 'Set the default RTS options to â¨optsâ©'
complete -c ghc -o fexternal-interpreter -d 'Run interpreted code in a separate process'
complete -c ghc -o fglasgow-exts -d Deprecated
complete -c ghc -o fno-safe-haskell -d 'Disable Safe Haskell'
complete -c ghc -o ghcversion-file -d '(GHC as a C compiler only) Use this ghcversion. h file'
complete -c ghc -s H -d 'Set the minimum size of the heap to â¨sizeâ©'
complete -c ghc -s j -d 'When compiling with --make, compile â¨nâ© modules in parallel'
complete -c ghc -l frontend -d 'run GHC with the given frontend plugin; see frontend_plugins for details'
complete -c ghc -l help -d 'Display help'
complete -c ghc -l info -d 'display information about the compiler'
complete -c ghc -l interactive -d 'Interactive mode - normally used by just running ghci; see ghci for details'
complete -c ghc -l make -d 'Build a multi-module Haskell program, automatically figuring out dependencies'
complete -c ghc -l mk-dll -d 'DLL-creation mode (Windows only)'
complete -c ghc -l numeric-version -d 'display GHC version (numeric only)'
complete -c ghc -l print-libdir -d 'display GHC library directory'
complete -c ghc -l show-options -d 'display the supported command line options'
complete -c ghc -l supported-extensions -d 'display the supported language extensions'
complete -c ghc -l version -d 'display GHC version'
complete -c ghc -s e -d 'Evaluate expr; see eval-mode for details'
complete -c ghc -s M -d 'generate dependency information suitable for use in a Makefile; see makefile-…'
complete -c ghc -o fasm-shortcutting -d 'Enable shortcutting on assembly.  Implied by -O2'
complete -c ghc -o fbinary-blob-threshold -d 'default: 500K.  Tweak assembly generator for binary blobs'
complete -c ghc -o fblock-layout-cfg -d 'Use the new cfg based block layout algorithm'
complete -c ghc -o fblock-layout-weightless -d 'Ignore cfg weights for code layout'
complete -c ghc -o fblock-layout-weights -d 'Sets edge weights used by the new code layout algorithm'
complete -c ghc -o fcall-arity -d 'Enable call-arity optimisation.  Implied by -O'
complete -c ghc -o fcase-folding -d 'Enable constant folding in case expressions.  Implied by -O'
complete -c ghc -o fcase-merge -d 'Enable case-merging.  Implied by -O'
complete -c ghc -o fcmm-elim-common-blocks -d 'Enable Cmm common block elimination.  Implied by -O'
complete -c ghc -o fcmm-sink -d 'Enable Cmm sinking.  Implied by -O'
complete -c ghc -o fcmm-static-pred -d 'Enable static control flow prediction.  Implied by -O'
complete -c ghc -o fcpr-anal -d 'Turn on CPR analysis in the demand analyser.  Implied by -O'
complete -c ghc -o fcross-module-specialise -d 'Turn on specialisation of overloaded functions imported from other modules'
complete -c ghc -o fcse -d 'Enable common sub-expression elimination.  Implied by -O'
complete -c ghc -o fdicts-cheap -d 'Make dictionary-valued expressions seem cheap to the optimiser'
complete -c ghc -o fdicts-strict -d 'Make dictionaries strict'
complete -c ghc -o fdmd-tx-dict-sel -d 'Use a special demand transformer for dictionary selectors'
complete -c ghc -o fdo-eta-reduction -d 'Enable eta-reduction.  Implied by -O'
complete -c ghc -o fdo-lambda-eta-expansion -d 'Enable lambda eta-expansion.  Always enabled by default'
complete -c ghc -o feager-blackholing -d 'Turn on eager blackholing'
complete -c ghc -o fenable-rewrite-rules -d 'Switch on all rewrite rules (including rules generated by automatic specialis…'
complete -c ghc -o fexcess-precision -d 'Enable excess intermediate precision'
complete -c ghc -o fexitification -d 'Enables exitification optimisation.  Implied by -O'
complete -c ghc -o fexpose-all-unfoldings -d 'Expose all unfoldings, even for very large or recursive functions'
complete -c ghc -o ffloat-in -d 'Turn on the float-in transformation.  Implied by -O'
complete -c ghc -o ffull-laziness -d 'Turn on full laziness (floating bindings outwards).  Implied by -O'
complete -c ghc -o ffun-to-thunk -d 'Allow worker-wrapper to convert a function closure into a thunk if the functi…'
complete -c ghc -o fignore-asserts -d 'Ignore assertions in the source.  Implied by -O'
complete -c ghc -o fignore-interface-pragmas -d 'Ignore pragmas in interface files.  Implied by -O0 only'
complete -c ghc -o flate-dmd-anal -d 'Run demand analysis again, at the end of the simplification pipeline'
complete -c ghc -o flate-specialise -d 'Run a late specialisation pass'
complete -c ghc -o fliberate-case -d 'Turn on the liberate-case transformation.  Implied by -O2'
complete -c ghc -o fliberate-case-threshold -d 'default: 2000'
complete -c ghc -o fllvm-pass-vectors-in-regs -d 'Pass vector value in vector registers for function calls'
complete -c ghc -o floopification -d 'Turn saturated self-recursive tail-calls into local jumps in the generated as…'
complete -c ghc -o fmax-inline-alloc-size -d 'default: 128'
complete -c ghc -o fmax-inline-memcpy-insns -d 'default: 32'
complete -c ghc -o fmax-inline-memset-insns -d 'default: 32'
complete -c ghc -o fmax-simplifier-iterations -d 'default: 4.  Set the max iterations for the simplifier'
complete -c ghc -o fmax-uncovered-patterns -d 'default: 4'
complete -c ghc -o fmax-worker-args -d 'default: 10.  Maximum number of value arguments for a worker'
complete -c ghc -o fno-opt-coercion -d 'Turn off the coercion optimiser'
complete -c ghc -o fno-pre-inlining -d 'Turn off pre-inlining'
complete -c ghc -o fno-state-hack -d 'Turn off the state hackwhereby any lambda with a real-world state token as ar…'
complete -c ghc -o fomit-interface-pragmas -d 'Don\\(aqt generate interface pragmas.  Implied by -O0 only'
complete -c ghc -o fomit-yields -d 'Omit heap checks when no allocation is being performed'
complete -c ghc -o foptimal-applicative-do -d 'Use a slower but better algorithm for ApplicativeDo'
complete -c ghc -o fpedantic-bottoms -d 'Make GHC be more precise about its treatment of bottom (but see also -fno-sta…'
complete -c ghc -o fregs-graph -d 'Use the graph colouring register allocator for register allocation in the nat…'
complete -c ghc -o fregs-iterative -d 'Use the iterative coalescing graph colouring register allocator in the native…'
complete -c ghc -o fsimpl-tick-factor -d 'default: 100.  Set the percentage factor for simplifier ticks'
complete -c ghc -o fsimplifier-phases -d 'default: 2.  Set the number of phases for the simplifier.  Ignored with -O0'
complete -c ghc -o fsolve-constant-dicts -d 'When solving constraints, try to eagerly solve super classes using available …'
complete -c ghc -o fspec-constr -d 'Turn on the SpecConstr transformation.  Implied by -O2'
complete -c ghc -o fspec-constr-count -d 'default: 3'
complete -c ghc -o fspec-constr-keen -d 'Specialize a call with an explicit constructor argument, even if the argument…'
complete -c ghc -o fspec-constr-threshold -d 'default: 2000'
complete -c ghc -o fspecialise -d 'Turn on specialisation of overloaded functions.  Implied by -O'
complete -c ghc -o fspecialise-aggressively -d 'Turn on specialisation of overloaded functions regardless of size, if unfoldi…'
complete -c ghc -o fstatic-argument-transformation -d 'Turn on the static argument transformation'
complete -c ghc -o fstg-cse -d 'Enable common sub-expression elimination on the STG intermediate language'
complete -c ghc -o fstg-lift-lams -d 'Enable late lambda lifting on the STG intermediate language.  Implied by -O2'
complete -c ghc -o fstg-lift-lams-known -d 'Allow turning known into unknown calls while performing late lambda lifting'
complete -c ghc -o fstg-lift-lams-non-rec-args -d 'Create top-level non-recursive functions with at most <n> parameters while pe…'
complete -c ghc -o fstg-lift-lams-rec-args -d 'Create top-level recursive functions with at most <n> parameters while perfor…'
complete -c ghc -o fstrictness -d 'Turn on strictness analysis.  Implied by -O.  Implies -fworker-wrapper'
complete -c ghc -o fstrictness-before -d 'Run an additional strictness analysis before simplifier phase â¨nâ©'
complete -c ghc -o funbox-small-strict-fields -d 'Flatten strict constructor fields with a pointer-sized representation'
complete -c ghc -o funbox-strict-fields -d 'Flatten strict constructor fields'
complete -c ghc -o funfolding-creation-threshold -d 'default: 750.  Tweak unfolding settings'
complete -c ghc -o funfolding-dict-discount -d 'default: 30.  Tweak unfolding settings'
complete -c ghc -o funfolding-fun-discount -d 'default: 60.  Tweak unfolding settings'
complete -c ghc -o funfolding-keeness-factor -d 'This has been deprecated in GHC 9. 0. 1'
complete -c ghc -o funfolding-use-threshold -d 'default: 80.  Tweak unfolding settings'
complete -c ghc -o fworker-wrapper -d 'Enable the worker-wrapper transformation'
complete -c ghc -s O -d 'Enable level 1 optimisations'
complete -c ghc -o O0 -d 'Disable optimisations (default)'
complete -c ghc -o O2 -d 'Enable level 2 optimisations'
complete -c ghc -o 'Oâ¨nâ©' -d 'Any -On where n > 2 is the same as -O2'
complete -c ghc -o clear-package-db -d 'Clear the package db stack'
complete -c ghc -o distrust -d 'Expose package â¨pkgâ© and set it to be distrusted.  See safe-haskell'
complete -c ghc -o distrust-all-packages -d 'Distrust all packages by default.  See safe-haskell'
complete -c ghc -o fpackage-trust -d 'Enable Safe Haskell trusted package requirement for trustworthy modules'
complete -c ghc -o global-package-db -d 'Add the global package db to the stack'
complete -c ghc -o hide-all-packages -d 'Hide all packages by default'
complete -c ghc -o hide-package -d 'Hide package â¨pkgâ©'
complete -c ghc -o ignore-package -d 'Ignore package â¨pkgâ©'
complete -c ghc -o no-auto-link-packages -d 'Don\\(aqt automatically link in the base and rts packages'
complete -c ghc -o no-global-package-db -d 'Remove the global package db from the stack'
complete -c ghc -o no-user-package-db -d 'Remove the user\\(aqs package db from the stack'
complete -c ghc -o package-db -d 'Add â¨fileâ© to the package db stack'
complete -c ghc -o package-env -d 'Use the specified package environment'
complete -c ghc -o package-id -d 'Expose package by id â¨unit-idâ©'
complete -c ghc -o this-unit-id -d 'Compile to be part of unit (i. e.  package) â¨unit-idâ©'
complete -c ghc -o trust -d 'Expose package â¨pkgâ© and set it to be trusted.  See safe-haskell'
complete -c ghc -o user-package-db -d 'Add the user\\(aqs package db to the stack'
complete -c ghc -s C -d 'Stop after generating C (. hc file)'
complete -c ghc -s E -d 'Stop after preprocessing (. hspp file)'
complete -c ghc -s F -d 'Enable the use of a pre-processor (set with -pgmF â¨cmdâ©)'
complete -c ghc -s S -d 'Stop after generating assembly (. s file)'
complete -c ghc -s x -d 'Override default behaviour for source files'
complete -c ghc -o pgma -d 'Use â¨cmdâ© as the assembler'
complete -c ghc -o pgmc -d 'Use â¨cmdâ© as the C compiler'
complete -c ghc -o pgmdll -d 'Use â¨cmdâ© as the DLL generator'
complete -c ghc -o pgmF -d 'Use â¨cmdâ© as the pre-processor (with -F only)'
complete -c ghc -o pgmi -d 'Use â¨cmdâ© as the external interpreter command'
complete -c ghc -o pgminstall_name_tool -d 'Use â¨cmdâ© as the program to inject runpath into mach-o dylibs on macOS'
complete -c ghc -o pgmL -d 'Use â¨cmdâ© as the literate pre-processor'
complete -c ghc -o pgml -d 'Use â¨cmdâ© as the linker'
complete -c ghc -o pgmlc -d 'Use â¨cmdâ© as the LLVM compiler'
complete -c ghc -o pgmlibtool -d 'Use â¨cmdâ© as the command for libtool (with -staticlib only)'
complete -c ghc -o pgmlm -d 'Use â¨cmdâ© as the linker when merging object files'
complete -c ghc -o pgmlo -d 'Use â¨cmdâ© as the LLVM optimiser'
complete -c ghc -o pgmotool -d 'Use â¨cmdâ© as the program to inspect mach-o dylibs on macOS'
complete -c ghc -o pgmP -d 'Use â¨cmdâ© as the C pre-processor (with -cpp only)'
complete -c ghc -o pgms -d 'Use â¨cmdâ© as the splitter'
complete -c ghc -o pgmwindres -d 'Use â¨cmdâ© as the program for embedding manifests on Windows'
complete -c ghc -o opta -d 'pass â¨optionâ© to the assembler'
complete -c ghc -o optc -d 'pass â¨optionâ© to the C compiler'
complete -c ghc -o optcxx -d 'pass â¨optionâ© to the C++ compiler'
complete -c ghc -o optdll -d 'pass â¨optionâ© to the DLL generator'
complete -c ghc -o optF -d 'pass â¨optionâ© to the custom pre-processor'
complete -c ghc -o opti -d 'pass â¨optionâ© to the interpreter sub-process'
complete -c ghc -o optL -d 'pass â¨optionâ© to the literate pre-processor'
complete -c ghc -o optl -d 'pass â¨optionâ© to the linker'
complete -c ghc -o optlc -d 'pass â¨optionâ© to the LLVM compiler'
complete -c ghc -o optlm -d 'pass â¨optionâ© to the linker when merging object files'
complete -c ghc -o optlo -d 'pass â¨optionâ© to the LLVM optimiser'
complete -c ghc -o optP -d 'pass â¨optionâ© to cpp (with -cpp only)'
complete -c ghc -o optwindres -d 'pass â¨optionâ© to windres'
complete -c ghc -o pgmc-supports-no-pie -d 'Indicate that the C compiler supports -no-pie'
complete -c ghc -o mbmi2 -d '(x86 only) Use BMI2 for bit manipulation operations'
complete -c ghc -o msse2 -d '(x86 only) Use SSE2 for floating-point operations'
complete -c ghc -o 'msse4.2' -d '(x86 only) Use SSE4. 2 for floating-point operations'
complete -c ghc -o fclear-plugins -d 'Clear the list of active plugins'
complete -c ghc -o fplugin-opt -d 'Give arguments to a plugin module; module must be specified with -fplugin=â¨…'
complete -c ghc -o fplugin-trustworthy -d 'Trust the used plugins and no longer mark the compiled module as unsafe'
complete -c ghc -o fplugin -d 'Load a plugin exported by a given module'
complete -c ghc -o hide-all-plugin-packages -d 'Hide all packages for plugins by default'
complete -c ghc -o plugin-package -d 'Expose â¨pkgâ© for plugins'
complete -c ghc -o plugin-package-id -d 'Expose â¨pkg-idâ© for plugins'
complete -c ghc -o fno-prof-auto -d 'Disables any previous -fprof-auto, -fprof-auto-top, or -fprof-auto-exported o…'
complete -c ghc -o fno-prof-cafs -d 'Disables any previous -fprof-cafs option'
complete -c ghc -o fno-prof-count-entries -d 'Do not collect entry counts'
complete -c ghc -o fprof-auto -d 'Auto-add SCC s to all bindings not marked INLINE'
complete -c ghc -o fprof-auto-calls -d 'Auto-add SCC s to all call sites'
complete -c ghc -o fprof-auto-exported -d 'Auto-add SCC s to all exported bindings not marked INLINE'
complete -c ghc -o fprof-auto-top -d 'Auto-add SCC s to all top-level bindings not marked INLINE'
complete -c ghc -o fprof-cafs -d 'Auto-add SCC s to all CAFs'
complete -c ghc -o prof -d 'Turn on profiling'
complete -c ghc -o ticky -d 'Turn on ticky-ticky profiling'
complete -c ghc -o fhpc -d 'Turn on Haskell program coverage instrumentation'
complete -c ghc -o fforce-recomp -d 'Turn off recompilation checking'
complete -c ghc -o fignore-hpc-changes -d 'Do not recompile modules just to match changes to HPC flags'
complete -c ghc -o fignore-optim-changes -d 'Do not recompile modules just to match changes to optimisation flags'
complete -c ghc -l exclude-module -d 'Regard â¨fileâ© as "stable"; i. e'
complete -c ghc -o ddump-mod-cycles -d 'Dump module cycles'
complete -c ghc -o dep-makefile -d 'Use â¨fileâ© as the makefile'
complete -c ghc -o dep-suffix -d 'Make dependencies that declare that files with suffix '
complete -c ghc -o dumpdir -d 'redirect dump files'
complete -c ghc -o hcsuf -d 'set the suffix to use for intermediate C files'
complete -c ghc -o hidir -d 'set directory for interface files'
complete -c ghc -o hiedir -d 'set directory for extended interface files'
complete -c ghc -o hiesuf -d 'set the suffix to use for extended interface files'
complete -c ghc -o hisuf -d 'set the suffix to use for interface files'
complete -c ghc -o include-cpp-deps -d 'Include preprocessor dependencies'
complete -c ghc -o include-pkg-deps -d 'Regard modules imported from packages as unstable'
complete -c ghc -s o -d 'set output filename'
complete -c ghc -o odir -d 'set directory for object files'
complete -c ghc -o ohi -d 'set the filename in which to put the interface'
complete -c ghc -o osuf -d 'set the output file suffix'
complete -c ghc -o outputdir -d 'set output directory'
complete -c ghc -o stubdir -d 'redirect FFI stub files'
complete -c ghc -o tmpdir -d 'set the directory for temporary files'
complete -c ghc -o fabstract-refinement-hole-fits -d 'default: off'
complete -c ghc -o fdefer-diagnostics -d 'Defer and group diagnostic messages by severity'
complete -c ghc -o fdiagnostics-color -d 'Use colors in error messages'
complete -c ghc -o fdiagnostics-show-caret -d 'Whether to show snippets of original source code'
complete -c ghc -o ferror-spans -d 'Output full span in error messages'
complete -c ghc -o fhide-source-paths -d 'hide module source and object paths'
complete -c ghc -o fkeep-going -d 'Continue compilation as far as possible on errors'
complete -c ghc -o fmax-refinement-hole-fits -d 'default: 6'
complete -c ghc -o fmax-relevant-binds -d 'default: 6'
complete -c ghc -o fmax-valid-hole-fits -d 'default: 6'
complete -c ghc -o fno-show-valid-hole-fits -d 'Disables showing a list of valid hole fits for typed holes in type error mess…'
complete -c ghc -o fno-sort-valid-hole-fits -d 'Disables the sorting of the list of valid hole fits for typed holes in type e…'
complete -c ghc -o fprint-axiom-incomps -d 'Display equation incompatibilities in closed type families'
complete -c ghc -o fprint-equality-relations -d 'Distinguish between equality relations when printing'
complete -c ghc -o fprint-expanded-synonyms -d 'In type errors, also print type-synonym-expanded types'
complete -c ghc -o fprint-explicit-coercions -d 'Print coercions in types'
complete -c ghc -o fprint-explicit-foralls -d 'Print explicit forall quantification in types.  See also ExplicitForAll'
complete -c ghc -o fprint-explicit-kinds -d 'Print explicit kind foralls and kind arguments in types'
complete -c ghc -o fprint-explicit-runtime-reps -d 'Print RuntimeRep variables in types which are runtime-representation polymorp…'
complete -c ghc -o fprint-potential-instances -d 'display all available instances in type error messages'
complete -c ghc -o fprint-typechecker-elaboration -d 'Print extra information from typechecker'
complete -c ghc -o fprint-unicode-syntax -d 'Use unicode syntax when printing expressions, types and kinds'
complete -c ghc -o frefinement-level-hole-fits -d 'default: off'
complete -c ghc -o freverse-errors -d 'Output errors in reverse order'
complete -c ghc -o fshow-docs-of-hole-fits -d 'Toggles whether to show the documentation of the valid hole fits in the output'
complete -c ghc -o fshow-hole-constraints -d 'Show constraints when reporting typed holes'
complete -c ghc -o fshow-hole-matches-of-hole-fits -d 'Toggles whether to show the type of the additional holes in refinement hole f…'
complete -c ghc -o fshow-provenance-of-hole-fits -d 'Toggles whether to show the provenance of the valid hole fits in the output'
complete -c ghc -o fshow-type-app-of-hole-fits -d 'Toggles whether to show the type application of the valid hole fits in the ou…'
complete -c ghc -o fshow-type-app-vars-of-hole-fits -d 'Toggles whether to show what type each quantified variable takes in a valid h…'
complete -c ghc -o fshow-type-of-hole-fits -d 'Toggles whether to show the type of the valid hole fits in the output'
complete -c ghc -o fsort-by-size-hole-fits -d 'Sort valid hole fits by size'
complete -c ghc -o fsort-by-subsumption-hole-fits -d 'Sort valid hole fits by subsumption'
complete -c ghc -o funclutter-valid-hole-fits -d 'Unclutter the list of valid hole fits by not showing provenance nor type appl…'
complete -c ghc -o Rghc-timing -d 'Summarise timing stats for GHC (same as +RTS -tstderr)'
complete -c ghc -s v -d 'verbose mode (equivalent to -v3)'
complete -c ghc -o 'vâ¨nâ©' -d 'set verbosity level'
complete -c ghc -o fdefer-out-of-scope-variables -d 'Convert variable out of scope variables errors into warnings'
complete -c ghc -o fdefer-type-errors -d 'Turn type errors into warnings, deferring the error until runtime'
complete -c ghc -o fdefer-typed-holes -d 'Convert typed hole errors into warnings, deferring the error until runtime'
complete -c ghc -o fenable-th-splice-warnings -d 'Generate warnings for Template Haskell splices'
complete -c ghc -o fhelpful-errors -d 'Make suggestions for mis-spelled names'
complete -c ghc -o fmax-pmcheck-models -d 'soft limit on the number of parallel models the pattern match checker should …'
complete -c ghc -o fshow-warning-groups -d 'show which group an emitted warning belongs to'
complete -c ghc -o fvia-C -d 'use the C code generator'
complete -c ghc -s W -d 'enable normal warnings'
complete -c ghc -s w -d 'disable all warnings'
complete -c ghc -o Wall -d 'enable almost all warnings (details in options-sanity)'
complete -c ghc -o Wall-missed-specialisations -d 'warn when specialisation of any overloaded function fails'
complete -c ghc -o Wauto-orphans -d '(deprecated) Does nothing'
complete -c ghc -o Wcompat -d 'enable future compatibility warnings (details in options-sanity)'
complete -c ghc -o Wcompat-unqualified-imports -d 'Report unqualified imports of core libraries which are expected to cause comp…'
complete -c ghc -o Wcpp-undef -d 'warn on uses of the #if directive on undefined identifiers'
complete -c ghc -o Wdefault -d 'enable default flags'
complete -c ghc -o Wdeferred-out-of-scope-variables -d 'Report warnings when variable out-of-scope errors are deferred until runtime'
complete -c ghc -o Wdeferred-type-errors -d 'Report warnings when deferred type errors are enabled'
complete -c ghc -o Wdeprecated-flags -d 'warn about uses of commandline flags that are deprecated'
complete -c ghc -o Wdeprecations -d 'warn about uses of functions & types that have warnings or deprecated pragmas'
complete -c ghc -o Wderiving-defaults -d 'warn about default deriving when using both DeriveAnyClass and GeneralizedNew…'
complete -c ghc -o Wderiving-typeable -d 'warn when Typeable is derived'
complete -c ghc -o Wdodgy-exports -d 'warn about dodgy exports'
complete -c ghc -o Wdodgy-foreign-imports -d 'warn about dodgy foreign imports'
complete -c ghc -o Wdodgy-imports -d 'warn about dodgy imports'
complete -c ghc -o Wduplicate-constraints -d 'warn when a constraint appears duplicated in a type signature'
complete -c ghc -o Wduplicate-exports -d 'warn when an entity is exported multiple times'
complete -c ghc -o Wempty-enumerations -d 'warn about enumerations that are empty'
complete -c ghc -o Werror -d 'make warnings fatal'
complete -c ghc -o Weverything -d 'enable all warnings supported by GHC'
complete -c ghc -o Whi-shadowing -d '(deprecated) warn when a . hi file in the current directory shadows a library'
complete -c ghc -o Widentities -d 'warn about uses of Prelude numeric conversions that are probably the identity…'
complete -c ghc -o Wimplicit-kind-vars -d 'warn when kind variables are implicitly quantified over'
complete -c ghc -o Wimplicit-prelude -d 'warn when the Prelude is implicitly imported'
complete -c ghc -o Winaccessible-code -d 'warn about inaccessible code'
complete -c ghc -o Wincomplete-patterns -d 'warn when a pattern match could fail'
complete -c ghc -o Wincomplete-record-updates -d 'warn when a record update could fail'
complete -c ghc -o Wincomplete-uni-patterns -d 'warn when a pattern match in a lambda expression or pattern binding could fail'
complete -c ghc -o Winferred-safe-imports -d 'warn when an explicitly Safe Haskell module imports a Safe-Inferred one'
complete -c ghc -o Winline-rule-shadowing -d 'Warn if a rewrite RULE might fail to fire because the function might be inlin…'
complete -c ghc -o Winvalid-haddock -d 'warn when a Haddock comment occurs in an invalid position'
complete -c ghc -o Wmissed-extra-shared-lib -d 'Warn when GHCi can\\(aqt load a shared lib'
complete -c ghc -o Wmissed-specialisations -d 'warn when specialisation of an imported, overloaded function fails'
complete -c ghc -o Wmissing-deriving-strategies -d 'warn when a deriving clause is missing a deriving strategy'
complete -c ghc -o Wmissing-export-lists -d 'warn when a module declaration does not explicitly list all exports'
complete -c ghc -o Wmissing-exported-signatures -d 'warn about top-level functions without signatures, only if they are exported'
complete -c ghc -o Wmissing-exported-sigs -d '(deprecated) warn about top-level functions without signatures, only if they …'
complete -c ghc -o Wmissing-fields -d 'warn when fields of a record are uninitialised'
complete -c ghc -o Wmissing-home-modules -d 'warn when encountering a home module imported, but not listed on the command …'
complete -c ghc -o Wmissing-import-lists -d 'warn when an import declaration does not explicitly list all the names brough…'
complete -c ghc -o Wmissing-local-signatures -d 'warn about polymorphic local bindings without signatures'
complete -c ghc -o Wmissing-local-sigs -d '(deprecated) warn about polymorphic local bindings without signatures'
complete -c ghc -o Wmissing-methods -d 'warn when class methods are undefined'
complete -c ghc -o Wmissing-monadfail-instances -d 'Warn when a failable pattern is used in a do-block that does not have a Monad…'
complete -c ghc -o Wmissing-pattern-synonym-signatures -d 'warn when pattern synonyms do not have type signatures'
complete -c ghc -o Wmissing-safe-haskell-mode -d 'warn when the Safe Haskell mode is not explicitly specified'
complete -c ghc -o Wmissing-signatures -d 'warn about top-level functions without signatures'
complete -c ghc -o Wmissing-space-after-bang -d '(deprecated) Does nothing'
complete -c ghc -o Wmonomorphism-restriction -d 'warn when the Monomorphism Restriction is applied'
complete -c ghc -o Wname-shadowing -d 'warn when names are shadowed'
complete -c ghc -o Wno-compat -d 'Disables all warnings enabled by -Wcompat'
complete -c ghc -o Wnoncanonical-monad-instances -d 'warn when Applicative or Monad instances have noncanonical definitions of ret…'
complete -c ghc -o Wnoncanonical-monadfail-instances -d 'warn when Monad or MonadFail instances have noncanonical definitions of fail'
complete -c ghc -o Wnoncanonical-monoid-instances -d 'warn when Semigroup or Monoid instances have noncanonical definitions of (<>)…'
complete -c ghc -o Worphans -d 'warn when the module contains orphan instance declarations or rewrite rules'
complete -c ghc -o Woverflowed-literals -d 'warn about literals that will overflow their type'
complete -c ghc -o Woverlapping-patterns -d 'warn about overlapping patterns'
complete -c ghc -o Wpartial-fields -d 'warn when defining a partial record field'
complete -c ghc -o Wpartial-type-signatures -d 'warn about holes in partial type signatures when PartialTypeSignatures is ena…'
complete -c ghc -o Wredundant-constraints -d 'Have the compiler warn about redundant constraints in type signatures'
complete -c ghc -o Wredundant-record-wildcards -d 'Warn about record wildcard matches when the wildcard binds no patterns'
complete -c ghc -o Wsafe -d 'warn if the module being compiled is regarded to be safe'
complete -c ghc -o Wsemigroup -d 'warn when a Monoid is not Semigroup, and on non- Semigroup definitions of (<>…'
complete -c ghc -o Wsimplifiable-class-constraints -d 'Warn about class constraints in a type signature that can be simplified using…'
complete -c ghc -o Wstar-binder -d 'warn about binding the (*) type operator despite StarIsType'
complete -c ghc -o Wstar-is-type -d 'warn when * is used to mean Data. Kind. Type'
complete -c ghc -o Wtabs -d 'warn if there are tabs in the source file'
complete -c ghc -o Wtrustworthy-safe -d 'warn if the module being compiled is marked as Trustworthy but it could inste…'
complete -c ghc -o Wtype-defaults -d 'warn when defaulting happens'
complete -c ghc -o Wtyped-holes -d 'Report warnings when typed hole errors are deferred until runtime'
complete -c ghc -o Wunbanged-strict-patterns -d 'warn on pattern bind of unlifted variable that is neither bare nor banged'
complete -c ghc -o Wunicode-bidirectional-format-characters -d 'warn about the usage of unicode bidirectional layout override characters'
complete -c ghc -o Wunrecognised-pragmas -d 'warn about uses of pragmas that GHC doesn\\(aqt recognise'
complete -c ghc -o Wunrecognised-warning-flags -d 'throw a warning when an unrecognised -W'
complete -c ghc -o Wunsafe -d 'warn if the module being compiled is regarded to be unsafe.  See safe-haskell'
complete -c ghc -o Wunsupported-calling-conventions -d 'warn about use of an unsupported calling convention'
complete -c ghc -o Wunsupported-llvm-version -d 'Warn when using -fllvm with an unsupported version of LLVM'
complete -c ghc -o Wunticked-promoted-constructors -d 'warn if promoted constructors are not ticked'
complete -c ghc -o Wunused-binds -d 'warn about bindings that are unused'
complete -c ghc -o Wunused-do-bind -d 'warn about do bindings that appear to throw away values of types other than ()'
complete -c ghc -o Wunused-foralls -d 'warn about type variables in user-written foralls that are unused'
complete -c ghc -o Wunused-imports -d 'warn about unnecessary imports'
complete -c ghc -o Wunused-local-binds -d 'warn about local bindings that are unused'
complete -c ghc -o Wunused-matches -d 'warn about variables in patterns that aren\\(aqt used'
complete -c ghc -o Wunused-packages -d 'warn when package is requested on command line, but was never loaded'
complete -c ghc -o Wunused-pattern-binds -d 'warn about pattern match bindings that are unused'
complete -c ghc -o Wunused-record-wildcards -d 'Warn about record wildcard matches when none of the bound variables are used'
complete -c ghc -o Wunused-top-binds -d 'warn about top-level bindings that are unused'
complete -c ghc -o Wunused-type-patterns -d 'warn about unused type variables which arise from patterns in in type family …'
complete -c ghc -o Wwarn -d 'make warnings non-fatal'
complete -c ghc -o Wwarnings-deprecations -d 'warn about uses of functions & types that have warnings or deprecated pragmas'
complete -c ghc -o Wwrong-do-bind -d 'warn about do bindings that appear to throw away monadic values that you shou…'
complete -c ghc -o '#include' -d 'The OPTIONS sections lists the status of each flag'
complete -c ghc -o ddump-ds-preopt -o ddebug-output -o 'gâ¨nâ©'
complete -c ghc -o fno-break-on-error -o fno-break-on-exception -o fno-ghci-leak-check -o fno-local-ghci-history -o fno-no-it -o fno-print-bind-result
complete -c ghc -o keep-hc-files -o no-keep-hi-files -o keep-hscpp-files -o keep-llvm-files -o no-keep-o-files -o keep-s-files
complete -c ghc -o fno-use-rpaths
complete -c ghc -o fno-glasgow-exts
complete -c ghc -s '?' -l supported-languages -s V
complete -c ghc -o fno-asm-shortcutting -o fno-block-layout-cfg -o fno-block-layout-weightless -o fno-call-arity -o fno-case-folding -o fno-case-merge -o fno-cmm-elim-common-blocks -o fno-cmm-sink -o fno-cmm-static-pred -o fno-cpr-anal -o fno-cross-module-specialise -o fno-cse -o fno-dicts-cheap -o fno-dicts-strict -o fno-dmd-tx-dict-sel -o fno-do-eta-reduction -o fno-do-lambda-eta-expansion -o fno-enable-rewrite-rules -o fno-excess-precision -o fno-exitification -o fno-expose-all-unfoldings -o fno-float-in -o fno-full-laziness -o fno-fun-to-thunk -o fno-ignore-asserts -o fno-ignore-interface-pragmas -o fno-late-dmd-anal -o fno-late-specialise -o fno-liberate-case -o fno-liberate-case-threshold -o fno-llvm-pass-vectors-in-regs -o fno-loopification -o fno-omit-interface-pragmas -o fno-omit-yields -o fno-optimal-applicative-do -o fno-pedantic-bottoms -o fno-regs-graph -o fno-regs-iterative -o fno-solve-constant-dicts -o fno-spec-constr -o fno-spec-constr-count -o fno-spec-constr-keen -o fno-spec-constr-threshold -o fno-specialise -o fno-specialise-aggressively -o fno-static-argument-transformation -o fno-stg-cse -o fno-stg-lift-lams -o fno-stg-lift-lams-known -o fno-stg-lift-lams-non-rec-args-any -o fno-stg-lift-lams-rec-args-any -o fno-strictness -o fno-unbox-small-strict-fields -o fno-unbox-strict-fields
complete -c ghc -o O1
complete -c ghc -o fprof-count-entries -o fno-prof-auto-calls
complete -c ghc -o fno-force-recomp -o fno-ignore-hpc-changes -o fno-ignore-optim-changes
complete -c ghc -o fno-abstract-refinement-hole-fits -o fno-diagnostics-show-caret -o fno-max-refinement-hole-fits -o fno-max-relevant-binds -o fno-max-valid-hole-fits -o fsort-valid-hole-fits -o fno-print-axiom-incomps -o fno-print-equality-relations -o fno-print-expanded-synonyms -o fno-print-explicit-coercions -o fno-print-explicit-foralls -o fno-print-explicit-kinds -o fno-print-explicit-runtime-reps -o fno-print-potential-instances -o fno-print-typechecker-elaboration -o fno-print-unicode-syntax -o fno-refinement-level-hole-fits -o fno-reverse-errors -o fno-show-docs-of-hole-fits -o fno-show-hole-matches-of-hole-fits -o fno-show-provenance-of-hole-fits -o fno-show-type-app-of-hole-fits -o fno-show-type-app-vars-of-hole-fits -o fno-type-of-hole-fits -o fno-sort-by-size-hole-fits -o fno-sort-by-subsumption-hole-fits
complete -c ghc -o fno-defer-out-of-scope-variables -o fno-defer-type-errors -o fno-defer-typed-holes -o fno-enable-th-splices -o fno-helpful-errors -o fno-show-warning-groups -o Wno-all-missed-specialisations -o Wno-compat-unqualified-imports -o Wno-deferred-out-of-scope-variables -o Wno-deferred-type-errors -o Wno-deprecated-flags -o Wno-deprecations -o Wno-deriving-defaults -o Wno-deriving-typeable -o Wno-dodgy-exports -o Wno-dodgy-foreign-import -o Wno-dodgy-imports -o Wno-duplicate-constraints -o Wno-duplicate-exports -o Wno-empty-enumerations -o Wno-hi-shadowing -o Wno-identities -o Wno-implicit-kind-vars -o Wno-implicit-prelude -o Wno-inaccessible-code -o Wno-incomplete-patterns -o Wno-incomplete-record-updates -o Wno-incomplete-uni-patterns -o Wno-inferred-safe-imports -o Wno-inline-rule-shadowing -o Wno-missed-extra-shared-lib -o Wno-missed-specialisations -o Wno-missing-deriving-strategies -o fnowarn-missing-export-lists -o Wno-missing-exported-signatures -o Wno-missing-exported-sigs -o Wno-missing-fields -o Wno-missing-home-modules -o fnowarn-missing-import-lists -o Wno-missing-local-signatures -o Wno-missing-local-sigs -o Wno-missing-methods -o Wno-missing-monadfail-instances -o Wno-missing-pattern-synonym-signatures -o Wno-missing-safe-haskell-mode -o Wno-missing-signatures -o Wno-monomorphism-restriction -o Wno-name-shadowing -o Wno-noncanonical-monad-instances -o Wno-noncanonical-monadfail-instances -o Wno-noncanonical-monoid-instances -o Wno-orphans -o Wno-overflowed-literals -o Wno-overlapping-patterns -o Wno-partial-fields -o Wno-partial-type-signatures -o Wno-redundant-constraints -o Wno-redundant-record-wildcards -o Wno-safe -o Wno-semigroup -o Wno-simplifiable-class-constraints -o Wno-star-binder -o Wno-star-is-type -o Wno-tabs -o Wno-safe -o Wno-type-defaults -o Wno-typed-holes -o Wno-unbanged-strict-patterns -o Wno-unrecognised-pragmas -o Wno-unrecognised-warning-flags -o Wno-unsafe -o Wno-unsupported-calling-conventions -o Wno-monomorphism-restriction -o Wno-unticked-promoted-constructors -o Wno-unused-binds -o Wno-unused-do-bind -o Wno-unused-foralls -o Wno-unused-imports -o Wno-unused-local-binds -o Wno-unused-matches -o Wno-unused-packages -o Wno-unused-pattern-binds -o Wno-unused-record-wildcards -o Wno-unused-top-binds -o Wno-unused-type-patterns -o Wno-warnings-deprecations -o Wno-wrong-do-bind -d 'Code generation'
complete -c ghc -o Wl -l whole-archive -d 'libraries, and -Wl,--no-whole-archive afterwards'
complete -c ghc -o export-all-symbols -d 'on Windows'
complete -c ghc -o ddump-X -d '(i. e.  when using -c)'

