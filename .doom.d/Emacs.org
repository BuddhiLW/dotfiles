#+TITLE: Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el

* Base
** JCS
#+begin_src emacs-lisp
;; (add-to-list 'package-archives '( "jcs-elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/") t)

;; (setq package-archive-priorities '(("melpa"    . 5)
;;                                    ("jcs-elpa" . 0)))
#+end_src

** DOOM initial setup
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Pedro Branquinho")
(setq user-mail-address "pedrogbranquinho@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-monokai-pro) ;;-> edit "(use-pacakge doom-themes)" instead.
(setq doom-font (font-spec :family "JetBrains Mono" :size 16 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :weight 'thin) ; inherits `doom-font''s :size
      doom-unicode-font (font-spec :family "JoyPixels" :size 25)
      doom-big-font (font-spec :family "Fira Mono" :size 19))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; Default face size
(set-face-attribute 'default nil :height 90)
;; Tecosaur snippet -- start --

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(display-time-mode 0)                             ; Enable time in the mode-line
(display-battery-mode 0)                          ; it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

** Window management
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

#+RESULTS:

** Initial screen

#+begin_src emacs-lisp
;; (load! "./my-func/dashboard.el")
#+end_src

#+RESULTS:
: t

Lastly, the doom dashboard "useful commands" are no longer useful to me.
So, we'll disable them and then for a particularly /clean/ look disable
the modeline and ~hl-line-mode~, then also hide the cursor.

#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Transparency
#+begin_src emacs-lisp
(load! "./my-func/transparency.el")
#+end_src

#+RESULTS:
: t

** Org
#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-ellipsis " ▾")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files
        '("~/PP/Notes/Agenda/Tasks.org"
          "~/PP/Notes/Agenda/Habits.org"
          "~/PP/Notes/Agenda/IMPA.org"
          "~/PP/Notes/Agenda/ProcSel.org"
          "~/PP/Notes/Agenda/University.org"
          "~/PP/Notes/Agenda/Research.org"
          "~/PP/Notes/Agenda/CafeDoBem.org"
          "~/PP/Notes/Agenda/Facti.org")))

#+end_src

* Maps
** Font resize
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("f" . "font")
        :desc "New default size" "d" #'lw/defdoom
        :desc "New ch-default size" "c" #'lw/chdoom)))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :desc "Yank history" "y" #'consult-yank-from-kill-ring)
#+end_src

* Elfeed
#+begin_src emacs-lisp
(setq elfeed-feeds
      '("https://www.democracynow.org/democracynow.rss"
        "http://docuwiki.net/index.php?title=Special:Newpages&feed=rss"
        "https://www.inovacaotecnologica.com.br/boletim/rss.php"
        "http://feeds.nbcnews.com/feeds/topstories"))

;; '("http://nullprogram.com/feed/")
;; "https://planet.emacslife.com/atom.xml"
;; "https://arxiv.org/search/?query=physics+informed+neural+network&searchtype=all&source=header"
#+end_src

#+RESULTS:
| https://www.democracynow.org/democracynow.rss | http://docuwiki.net/index.php?title=Special:Newpages&feed=rss | https://www.inovacaotecnologica.com.br/boletim/rss.php | http://feeds.nbcnews.com/feeds/topstories |

* Org-ref
#+begin_src emacs-lisp
;; (use-package! helm-bibtex)

;; (use-package! gscholar-bibtex)

;; (use-package! bibtex-completion)

;; (use-package! org-ref
;;   :config
;;   (require 'org-ref-helm)
;;   (require 'org-ref-arxiv)
;;   (require 'org-ref-scopus)
;;   (require 'org-ref-wos)
;;   (map! :leader
;;         (:prefix-map ("b" . "buddhi")
;;          (:prefix ("l" . "latex")
;;           (:prefix ("i" . "insert")
;;            :desc "Bib-citation" "c" #'org-ref-insert-link
;;            :desc "Auto-ref" "r" #'org-ref-insert-ref-link
;;            :desc "Arxiv Search" "s" #'arxiv-search
;;            :desc "Arxiv Download" "d" #'arxiv-download-pdf-export-bibtex
;;            :desc "GScholar Search" "g" #'gscholar-bibtex))))
;;   (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src

#+begin_src emacs-lisp
;; (use-package! arxiv-mode
;;   :config
;;   (setq arxiv-default-download-folder
;;         (substitute-in-file-name "$HOME/Documents/Reseach/"))
;;   (setq arxiv-default-bibliography
;;         (substitute-in-file-name "$HOME/Bibliography/collection.bib")))
#+end_src

* Revert buffer
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Revert buffer" "r" #'revert-buffer))
#+end_src

#+RESULTS:
: revert-buffer

* Celestial-mode-line
#+begin_src emacs-lisp
;; (use-package! celestial-mode-line
;;   :config
;;   (setq calendar-longitude "20.54S")
;;   (setq calendar-latitude "47.40W")
;;   (setq calendar-location-name "Franca, SP")
;;   (defvar celestial-mode-line-phase-representation-alist '((0 . "○") (1 . "☽") (2 . "●") (3 . "☾")))
;;   (defvar celestial-mode-line-sunrise-sunset-alist '((sunrise . "☀↑ ") (sunset . "☀↓ ")))
;;   (defvar celestial-mode-line-phase-representation-alist '((0 . "( )") (1 . "|)") (2 . "(o)") (3 . "|)")))
;;   (defvar celestial-mode-line-sunrise-sunset-alist '((sunrise . "*^") (sunset . "*v")))
;;   (celestial-mode-line-start-timer))
#+end_src

#+begin_src emacs-lisp
(defun lw/sunset ()
  (interactive)
  (display-message-or-buffer (message "`%s'" (solar-sunrise-sunset-string (calendar-current-date)))))

(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Sunrise sunset info" "µ" #'lw/sunset))
#+end_src

#+RESULTS:
: lw/sunset

* Roam
#+begin_src emacs-lisp
(use-package! deft
  :bind ("<f2>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/buddhi-roam/"
                deft-extensions '("md" "org"))
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org"))
  ;; (deft-directory org-roam-directory))

#+end_src
* PDFs in Emacs
#+begin_src emacs-lisp
(use-package! pdf-tools)
#+end_src
* Programming Languages
** LaTeX
#+begin_src emacs-lisp :tangle no
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 3.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |
** Julia

* ERC/IRC Twitch

#+begin_src emacs-lisp
;; (use-package! erc-hl-nicks)
;; (use-package! erc-colorize)

;; (use-package! erc-twitch
;;   :config
;;   (add-hook! erc-twitch-mode-hook #'erc-colorize-enable)
;;   (add-hook! erc-twitch-mode-hook #'erc-hl-nicks-enable))
#+end_src

#+RESULTS:
: erc-colorize
* Pass
#+begin_src emacs-lisp
;; (use-package! hidepw)
#+end_src

#+RESULTS:
: hidepw

#+begin_src emacs-lisp
;; (use-package! helm-pass)
#+end_src

#+RESULTS:
: helm-pass

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Password list" "p" #'helm-pass))
#+end_src

#+RESULTS:
: helm-pass
* Navigation
#+begin_src emacs-lisp
(load! "./my-func/goto.el")
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/diary.el")
#+end_src

** Diary

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Diary entry" "d" #'lw/create-or-access-diary))
#+end_src
** Evil Deeds

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Evil Deeds" "n" #'lw/find-evildeeds)))
#+end_src

#+RESULTS:
: lw/find-evildeeds

** Function definitions
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Function at point" "f" #'find-function-at-point)))
#+end_src

#+RESULTS:
: find-function-at-point
** Go to =Emacs.org= and =my-func.org=


#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Emacs.org" "e"  #'lw/goto-emacs-org
        :desc "my-func.org" "F" #'lw/goto-my-func-org)))
#+end_src

#+RESULTS:
: lw/goto-my-func-org
** Navigate to books

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Active CS book" "a"  #'lw/goto-cs-active
        :desc "CS books" "c" #'lw/goto-cs-books)))
#+end_src

#+RESULTS:
: lw/goto-cs-books
** Navigate to book notes
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Book notes" "n"  #'lw/goto-book-notes)))
#+end_src

* Magit
#+begin_src emacs-lisp
(map! :leader
      :desc "Magit" "m" #'magit)
#+end_src

* Proof General and Coq
#+begin_src emacs-lisp
;; (use-package! company-coq)
;; (use-package! coq-commenter)
;; (use-package! proof-general
;;   :config
;;   (add-hook! 'coq-mode-hook #'company-coq-mode)
;;   (add-hook! 'coq-mode-hook #'coq-commenter-mode))
#+end_src

#+RESULTS:
: t

* Anaconda
#+begin_src emacs-lisp
(load! "./my-func/ein-babel.el")
#+end_src

#+RESULTS:
: t

* Elm
#+begin_src emacs-lisp
(use-package! elm-mode
  :hook (elm-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode | elm-indent-mode |

#+begin_src emacs-lisp
;; (use-package! elm-oracle
;;   :config
;; (with-eval-after-load 'company
;;         (add-to-list 'company-backends 'company-elm))
;; (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
#+end_src

#+begin_src shell
npm install -g elm-oracle
#+end_src

* Comment Julia

# #+begin_src emacs-lisp
# (setq inferior-julia-program-name "julia")
# #+end_src

# #+RESULTS:
# : julia

# #+begin_src emacs-lisp
# (package! julia-vterm
   #   :recipe (:host github
                #            :repo "shg/julia-vterm.el"))

# (package-install-file "~/.doom.d/julia-vterm.el/julia-vterm.el")

# (package! ob-julia-vterm
   #   :recipe (:host github
                #            :repo "shg/ob-julia-vterm.el"))

# (package-install-file "~/.doom.d/ob-julia-vterm.el/ob-julia-vterm.el")

# (package! ob-julia
   #   :recipe (:host github
                #            :repo "gjkernsx/ob-julia"))

# ;; (package-install-file "~/.doom.d/ob-julia/ob-julia.el")

# (add-hook 'julia-mode-hook #'julia-vterm-mode)
# (setq julia-vterm-repl-program "/usr/bin/julia -t 4")

# (require 'org)
# (add-to-list 'org-babel-load-languages '(julia-vterm . t))
# (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
# (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
# #+end_src

# #+begin_src emacs-lisp
# (add-to-list 'load-path "~/.doom.d/ob-julia/ob-julia.el")
# #+end_src

# To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

# #+begin_src emacs-lisp
# ;; (with-eval-after-load 'org
# ;;   (org-babel-do-load-languages
# ;;    'org-babel-load-languages
# ;;    '((emacs-lisp . t)
# ;;      (python . t)
# ;;      (browser . t)
# ;;      (ditaa . t)
# ;;      (R . t)
# ;;      (go . t)
# ;;      ;; (ipython . t)
# ;;      (julia-vterm . t)
# ;;      ;; (julia . t)
# ;;      (ein . t)
# ;;      (ditaa . t)
# ;;      (css . t)
# ;;      (lisp . t)
# ;;      (latex . t)
# ;;      (clojure . t)
# ;;      (clojurescript . t)))
# ;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))
# #+end_src

# #+begin_src emacs-lisp
# (custom-set-variables
   #  '(ob-ein-languages
        #    '(("ein-python" . python)
               #      ("ein-R" . R)
               #      ("ein-r" . R)
               #      ("ein-julia" . julia))))
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
# (use-package julia-mode)
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
# (use-package julia-snail)
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
#    (setq inferior-julia-program-name "julia")
# #+end_src
* Web browser
#+begin_src emacs-lisp
;; (use-package! eaf
;;   :load-path "~/.doom.d/site-lisp/emacs-application-framework"
;;   :custom
;;   ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
;;   (eaf-browser-continue-where-left-off t)
;;   (eaf-browser-enable-adblocker t)
;;   (browse-url-browser-function 'eaf-open-browser)
;;   :config
;;   (defalias 'browse-web #'eaf-open-browser))
;;   ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
;;   ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
;;   ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
;;   ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.doom.d/site-lisp/emacs-application-framework/")
#+end_src

#+RESULTS:
| ~/.doom.d/site-lisp/emacs-application-framework/ | ~/.doom.d/sit |

# #+begin_src emacs-lisp
# # (require 'eaf)
# # (require 'eaf-browser)
# # #+end_src

#+RESULTS:
: eaf-browser
* Python
** Anaconda

#+begin_src emacs-lisp :tangle packages.el
(package! conda)
#+end_src

#+begin_src emacs-lisp
;; (use-package! conda
;;   :config
;;   ;; (setq
;;   ;;  conda-env-home-directory (expand-file-name "~/opt/miniconda3/")
;;   ;;  conda-env-subdirectory "envs/")
;;   (custom-set-variables '(conda-anaconda-home "/opt/miniconda3/"))
;;   (conda-env-initialize-interactive-shells)
;;   (conda-env-initialize-eshell)
;;   (conda-env-autoactivate-mode t))
#+end_src
** Ipython
#+begin_src emacs-lisp :tangle packages.el
(package! ein)
#+end_src

#+begin_src emacs-lisp
;; (use-package! ein)
;; (require 'ein)
#+end_src

* Haskell
#+begin_src emacs-lisp :tangle no
(use-package! haskell-mode
  :config
  (define-key! map [?\C-c ?r] 'haskell-run))
#+end_src

#+RESULTS:
: t

* Go
#+begin_src emacs-lisp
;; (use-package! go-complete
;;   :config
;;  (add-hook 'completion-at-point-functions 'go-complete-at-point))
#+end_src

#+begin_src emacs-lisp :eval yes
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)
#+end_src

#+RESULTS:
| gofmt-before-save | undo-fu-session-save-safe |

* Xthemes
#+begin_src emacs-lisp :tangle packages.el
(package! ewal-doom-themes)
(package! doom-themes)
(package! doom-modeline-now-playing)
(package! doom-modeline)
#+end_src
#+RESULTS:
: doom-modeline

#+begin_src emacs-lisp
(use-package! doom-modeline
  :config
  ;; (setq doom-modeline-height 20)
  ;; (setq doom-modeline-bar-width 3)
  ;; (setq doom-modeline-height 1) ; optional
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
  (custom-set-faces
    '(mode-line ((t (:family "Gayathri" :size 13)))) ;; Free Sans
    '(mode-line-active ((t (:family "Gayathri" :size 13)))) ; For 29+
    '(mode-line-inactive ((t (:family "Gayathri" :size 13))))))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-monokai-pro t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))


#+end_src
* W3M
#+begin_src emacs-lisp
;; (use-package! w3m
;;   :config
;;   (setq w3m-search-default-engine "duckduckgo"))
#+end_src
* Types of Searches
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("s" . "search")
        :desc "w3m search" "s" #'w3m-search
        :desc "dictionary search" "d" #'dictionary-search)))
#+end_src

#+RESULTS:
: dictionary-search

* LaTeX
** AUCTeX

#+begin_src emacs-lisp :tangle packages.el :tangle no
(package! auctex)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! auctex
  :ensure tex-mode
  :hook (tex-mode . auctex-mode))
#+end_src

#+RESULTS:
| auctex-mode |
#+RESULTS:
** LaTeX Extra features for editing
#+begin_src emacs-lisp
      ;; (use-package latex-extra)
#+end_src

** Pygments
#+begin_src emacs-lisp :tangle no
(eval-after-load "tex"
  '(setcdr (assoc "LaTeX" TeX-command-list)
          '("%`%l%(mode) -shell-escape%' %t"
            TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX")))
#+end_src

#+RESULTS:
| %`%l%(mode) -shell-escape%' %t | TeX-run-TeX | nil | (latex-mode doctex-mode) | :help | Run LaTeX |


#+name: setup-minted
#+begin_src emacs-lisp :exports both :results silent :tangle no
(setq org-latex-listings 'minted)
(setq org-latex-custom-lang-environments
 '((emacs-lisp "common-lispcode")))
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")
        ("linenos" "false")
        ("bgcolor" "LightGray")))
(setq org-latex-to-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Output
#+begin_src emacs-lisp
   ;; ; SyncTeX basics

   ;; ; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
   ;; ; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20

   ;; (defun un-urlify (fname-or-url)
   ;;   "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
   ;;   (if (string= (substring fname-or-url 0 8) "file:///")
   ;;       (url-unhex-string (substring fname-or-url 7))
   ;;     fname-or-url))

   ;; (defun urlify-escape-only (path)
   ;;   "Handle special characters for urlify"
   ;;   (replace-regexp-in-string " " "%20" path))

   ;; (defun urlify (absolute-path)
   ;;   "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
   ;;   (if (string= (substring absolute-path 0 1) "/")
   ;;       (concat "file://" (urlify-escape-only absolute-path))
   ;;       absolute-path))


   ;; ; SyncTeX backward search - based on http://emacswiki.org/emacs/AUCTeX#toc20, reproduced on https://tex.stackexchange.com/a/49840/21017

   ;; (defun th-evince-sync (file linecol &rest ignored)
   ;;   (let* ((fname (un-urlify file))
   ;;          (buf (find-file fname))
   ;;          (line (car linecol))
   ;;          (col (cadr linecol)))
   ;;     (if (null buf)
   ;;         (message "[Synctex]: Could not open %s" fname)
   ;;       (switch-to-buffer buf)
   ;;       (goto-line (car linecol))
   ;;       (unless (= col -1)
   ;;         (move-to-column col)))))

   ;; (defvar *dbus-evince-signal* nil)

   ;; (defun enable-evince-sync ()
   ;;   (require 'dbus)
   ;;   ; cl is required for setf, taken from: http://lists.gnu.org/archive/html/emacs-orgmode/2009-11/msg01049.html
   ;;   (require 'cl)
   ;;   (when (and
   ;;          (eq window-system 'x)
   ;;          (fboundp 'dbus-register-signal))
   ;;     (unless *dbus-evince-signal*
   ;;       (setf *dbus-evince-signal*
   ;;             (dbus-register-signal
   ;;              ;; :session nil "/org/gnome/evince/Window/0"
   ;;              "org.gnome.evince.Window" "SyncSource"
   ;;              'th-evince-sync)))))

   ;; (add-hook 'LaTeX-mode-hook 'enable-evince-sync)


   ;; ; SyncTeX forward search - based on https://tex.stackexchange.com/a/46157

   ;; ;; universal time, need by evince
   ;; (defun utime ()
   ;;   (let ((high (nth 0 (current-time)))
   ;;         (low (nth 1 (current-time))))
   ;;    (+ (* high (lsh 1 16) ) low)))

   ;; ;; Forward search.
   ;; ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
   ;; ;; (defun auctex-evince-forward-sync (pdffile texfile line)
   ;; ;;   (let ((dbus-name
   ;; ;;      (dbus-call-method :session
   ;; ;;                "org.gnome.evince.Daemon"  ; service
   ;; ;;                "/org/gnome/evince/Daemon" ; path
   ;; ;;                "org.gnome.evince.Daemon"  ; interface
   ;; ;;                "FindDocument"
   ;; ;;                (urlify pdffile)
   ;; ;;                t     ; Open a new window if the file is not opened.
   ;; ;;                )))
   ;; ;;     (dbus-call-method :session
   ;; ;;           dbus-name
   ;; ;;           "/org/gnome/evince/Window/0"
   ;; ;;           "org.gnome.evince.Window"
   ;; ;;           "SyncView"
   ;; ;;           (urlify-escape-only texfile)
   ;; ;;           (list :struct :int32 line :int32 1)
   ;; ;;   (utime))))

   ;; ;; (defun auctex-evince-view ()
   ;; ;;   (let ((pdf (file-truename (concat default-directory
   ;; ;;                     (TeX-master-file (TeX-output-extension)))))
   ;; ;;     (tex (buffer-file-name))
   ;; ;;     (line (line-number-at-pos)))
   ;; ;;     (auctex-evince-forward-sync pdf tex line)))

   ;; ;; New view entry: Evince via D-bus.
   ;; (setq TeX-view-program-list '())
   ;; (add-to-list 'TeX-view-program-list
   ;;          '("evince" auctex-evince-view))

   ;; ;; Prepend Evince via D-bus to program selection list
   ;; ;; overriding other settings for PDF viewing.
   ;; (setq TeX-view-program-selection '())
   ;; (add-to-list 'TeX-view-program-selection
   ;;          '(output-pdf "evince"))
#+end_src

#+RESULTS:
| output-pdf | evince |


#+begin_src emacs-lisp :tangle no
(setq TeX-PDF-mode t)

(defun pdfevince ()
   (add-to-list 'TeX-output-view-style
                 '("^pdf$" "." "evince %o %(outpage)")))


(defun pdfokular ()
   (add-to-list 'TeX-output-view-style
                 '("^pdf$" "." "okular %o %(outpage)")))


   ;; (add-hook  'LaTeX-mode-hook  'pdfevince  t) ; AUCTeX LaTeX mode
(add-hook  'LaTeX-mode-hook  'pdfokular  t) ; AUCTeX LaTeX mode
#+end_src

#+RESULTS:
| pdfevince |

** Output evince setup
#+begin_src emacs-lisp :tangle no
(load "auctex.el" nil t t)
   ;; (load "preview-latex.el" nil t t)
#+end_src

#+RESULTS:
: t

** Preview
#+begin_src emacs-lisp :tangle packages.el
(package! latex-preview-pane)
(package! latex-pretty-symbols)
(package! pretty-symbols)
#+end_src

#+begin_src emacs-lisp
(use-package! latex-preview-pane)
(use-package! latex-pretty-symbols)
(defun my-pretty-lambda ()
  "make some word or string show as pretty Unicode symbols"
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; λ
          )))

;;(add-hook 'scheme-mode-hook 'my-pretty-lambda)
(global-prettify-symbols-mode 1)
#+end_src

#+RESULTS:
: t


#+begin_src emacs-lisp :tangle no
(setq TeX-PDF-mode t)
(require 'tex)
(TeX-global-PDF-mode t)
#+end_src

#+RESULTS:
: t
** Auto-complete
#+begin_src emacs-lisp
;; (use-package! auto-complete-auctex)
#+end_src

#+RESULTS:

* Pressentation
** Org Reveal

#+begin_src emacs-lisp :tangle packages.el
(package! ox-reveal)
(package! impatient-mode)
(package! celestial-mode-line)
#+end_src

#+begin_src emacs-lisp :tangle no
(require 'ox-reveal)
#+end_src

#+RESULTS:
: ox-reveal

* Java
#+begin_src emacs-lisp :tangle packages.el :tangle no
(package! lsp-sonarlint)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! lsp-sonarlint
  :config
  (require 'lsp-sonarlint)
  (setq lsp-sonarlint-java-enabled t))
#+end_src
* SQL

#+begin_src emacs-lisp :tangle packages.el
(package! sqlformat)
#+end_src

#+begin_src emacs-lisp
;; (use-package! sqlformat
;;   :config
;;   (setq sqlformat-command 'pgformatter)
;;   (add-hook 'sql-mode-hook 'sqlformat-on-save-mode))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle packages.el
(package! emacsql-mysql)
(package! ob-sql-mode)
(package! sqlformat)
(package! esqlite)
(package! sql-indent)
(package! sqlup-mode)
(package! emacsql-psql)
(package! emacsql-mysql)
(package! emacsql-sqlite-module)
(package! emacsql-sqlite-builtin)
#+end_src

* Cursor lock-screen (scrolling behavior)
#+begin_src emacs-lisp :tangle packages.el
(package! centered-cursor-mode)
#+end_src

* Pomodoro
#+begin_src emacs-lisp :tangle packages.el
(package! org-pomodoro)
#+end_src

* Custom bindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
        :desc "centered-cursor-mode" "C-l" #'centered-cursor-mode)
      (:desc "anzu-replace" "r" #'anzu-replace-at-cursor-thing))
#+end_src

* Chinese
#+begin_src emacs-lisp :tangle packages.el
(package! pyim)
(package! pyim-basedict)
#+end_src

* Shortcuts to load modules, as needed

To create new loadable modules,

#+begin_src emacs-lisp
(load! "./my-func/define-modules.el")
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/load-modules.el")
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("l" . "load module")
        :desc "Chinese" "c" #'lw/load-chinese
        :desc "LaTeX" "l" #'lw/load-latex)))
#+end_src

* Datomic snippets?
#+begin_src emacs-lisp :tangle packages.el
;; (package! datomic-snippets)
#+end_src
* Current time function

#+begin_src emacs-lisp
(load! "./my-func/isosec.el")
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("z" . "Zettle funcs")
          :desc "Isosec" "i" #'blw/insert-current-isosec)))
#+end_src
#+RESULTS:
: blw/insert-current-isosec
* Markdown
#+begin_src emacs-lisp :tangle packages.el
(package! flymd)
#+end_src
* EPUB reader
#+begin_src emacs-lisp :tangle packages.el
(package! nov)
#+end_src

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix-map ("r" . "read")
        :desc "EPUB refresh size" "r" #'nov-render-document)))
#+end_src

#+RESULTS:
: nov-render-document
* Emoji
#+begin_src emacs-lisp :tangle packages.el
(package! emojify)
#+end_src

* Fixes
#+begin_src emacs-lisp :tangle packages.el
(package! pyim-basedict)
(package! pyim)
(package! bing-dict)
(package! zh-align
  :recipe (:host github
           :repo "chen-chao/zh-align.el"))
(package! doom-themes)
(package! evil-collection)
(package! bing-dict)
(package! straight :pin "3eca39d")
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/fast-input-method.el")
(evil-mode)
#+end_src

* RevealJS
#+begin_src emacs-lisp :tangle packages.el
(package! ox-reveal)
(package! impatient-mode)
;; (package! httpd)
#+end_src

#+begin_src emacs-lisp
(require 'ox-reveal)
#+end_src
#
# #+RESULTS:
# : ox-reveal
#+begin_src emacs-lisp
;; (use-package impatient-mode)
#+end_src
* JavaScript
** Eslint
#+begin_src emacs-lisp :tangle packages.el
(package! eslint-rc)
(package! setup)
;; (use-package! flymake-eslint
;;   :config
;;   (add-hook web-mode-hook flymake-eslint-enable))
#+end_src

#+begin_src emacs-lisp
(add-hook 'typescript-mode-hook 'eslint-rc-mode)
(add-hook 'js2-mode-hook 'eslint-rc-mode)
(add-hook 'web-mode-hook 'eslint-rc-mode)
#+end_src

#+begin_src emacs-lisp :tangle ~/dotfiles/.config/facti/.dir-local.el
;; dir-local.el for facti's js setup
((rjsx-mode . ((eval . (setq js-indent-level 2))
               (eval . (setq indent-tabs-mode nil))
               (eval . (setq tab-width 4))
               (eval . (setq indent-line-function 'insert-tab))))) 
#+end_src

** Hooks
#+begin_src emacs-lisp
(add-hook 'rjsx-mode-hook 'tide-mode)
#+end_src

** JSX
#+begin_src emacs-lisp
;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

;; http://www.flycheck.org/manual/latest/index.html
(require 'flycheck)

;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+end_src

#+begin_src emacs-lisp
(add-hook 'web-mode-hook 'lsp-defered)
#+end_src

#+RESULTS:
| lsp-defered | er/add-web-mode-expansions | er/add-html-mode-expansions | +web--fix-js-comments-h | eslint-rc-mode | doom--enable-+web-wordpress-mode-in-web-mode-h | doom--enable-+web-django-mode-in-web-mode-h | doom--enable-+web-jekyll-mode-in-web-mode-h | emmet-mode | doom--enable-+javascript-npm-mode-in-web-mode-h |
** Indium
#+begin_src emacs-lisp :tangle packages.el
(package! indium)
#+end_src

** Slime-js
#+begin_src emacs-lisp :tangle packages.el
;; (package! sly :disable t)
;; (package! sly-macrostep :disable t)
;; (package! sly-repl-ansi-color :disable t)
;; (package! slime)
;; (package! slime-js
;;         :recipe (:host github
;;                  :repo "swank-js/swank-js"))
#+end_src

#+begin_src emacs-lisp
;; (use-package! slime
;;   :config (setq inferior-lisp-program "sbcl"))
#+end_src

#+RESULTS:
: t

** Keymaps
#+begin_src emacs-lisp
(defun insert-file-name ()
  "Insert the full path file name into the current buffer."
  (interactive)
  (insert (concat (buffer-file-name (window-buffer (minibuffer-selected-window))) " " (what-line))))
#+end_src

#+RESULTS:
: insert-file-name

#+begin_src emacs-lisp
(map! :after evil-mode
      :map tide-mode-map
      "C-." nil)

(map! :map tide-mode-map
      "C-." 'tide-jump-to-definition
      "C-," 'tide-jump-back)
#+end_src


#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("j" . "javascript")
        :desc "go-to definition" "." #'tide-jump-to-definition
        :desc "go-to implementation" "," #'tide-jump-implementation
        :desc "back from go-to" "," #'tide-jump-back)))

;; Insert file name:
;; To easily point out stuff in files, in documentation processes
;; and team alignments etc.

(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "insert file name" "n" #'insert-file-name))
#+end_src

#+RESULTS:
: insert-file-name

* General Web Dev
** Keymaps
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("w" . "web")
        :desc "attribute match" "m" #'web-mode-tag-match)))
#+end_src

* Copilot
#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
#+end_src

** Keymaps
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("c" . "Co-pilot")
        :desc "Accept full completion" "TAB" #'copilot-accept-completion)))

(map! :leader
      (:prefix-map ("b" . "buddhi")
        :desc "Accept full completion" "TAB" #'copilot-accept-completion))
#+end_src

#+RESULTS:
: copilot-accept-completion
* Pomodoro
#+begin_src emacs-lisp
;; From  time.el -> display-time-mode
(defun lw/display-time-event-handler ()
  (display-time-update)
  (let* ((current (current-time))
	 (timer display-time-timer)
	 ;; Compute the time when this timer will run again, next.
	 (next-time (timer-relative-time
		     (list (aref timer 1) (aref timer 2) (aref timer 3))
		     (* 5 (aref timer 4)) 0)))
    ;; If the activation time is not in the future,
    ;; skip executions until we reach a time in the future.
    ;; This avoids a long pause if Emacs has been suspended for hours.
    (or (time-less-p current next-time)
	(progn
	  (timer-set-time timer (timer-next-integral-multiple-of-time
				 current display-time-interval)
			  display-time-interval)
	  (timer-activate timer)))))

(defun lw/timer-pomo ()
  (let ((pomo-output (shell-command-to-string "sb-pomo | tr -d '\n'")))
    (if (equal "" pomo-output)
        (progn
          (cancel-function-timers 'lw/timer-pomo)
          (setq-default mode-line-misc-info "No pomodoro running"))
        (setq-default mode-line-misc-info pomo-output))))

(defun lw/pomodoro-echo ()
  (interactive
   (run-with-timer 0 1 'lw/timer-pomo)
   (run-at-time t 1 'lw/display-time-event-handler)))

(defun lw/kill-pomo-updates ()
  (interactive
   (progn
     (cancel-function-timers 'lw/timer-pomo)
     (cancel-function-timers 'lw/display-time-event-handler)
     (setq-default mode-line-misc-info nil))))
#+end_src

#+RESULTS:
: lw/kill-pomo-updates

* Org
#+begin_src emacs-lisp :tangle packages.el
(package! org-bullets)
(package! org-superstar)
#+end_src

#+begin_src emacs-lisp
(use-package! org-bullets
  :after org
  ;; :hook (org-mode . org-bullets)
  :custom
  ;; (org-superstar-remove-leading-stars t)
  (org-bullets-bullet-list '("家" "ॐ" "同" "Ø" "א" "҉ " "҈ ")))

(use-package! org-superstar
  ;; :if (not dw/is-termux)
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("家" "ॐ" "同" "Ø" "א" "҉ " "҈ ")))
                                       ;; Make sure org-indent face is available
(require 'org-indent)
;; (require 'org-indent
;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;; Get rid of the background on column views
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! org-present)
#+end_src

#+begin_src emacs-lisp
;; Install visual-fill-column
(unless (package-installed-p 'visual-fill-column)
  (package-install 'visual-fill-column))


(defun dw/org-present-start ()
  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun dw/org-present-end ()
  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))


(defun dw/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  (org-show-children))

(defun dw/org-present-hook ()
       ;; Configure fill width
  (setq visual-fill-column-width 110
      visual-fill-column-center-text t)
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
					  (header-line (:height 4.0) variable-pitch)
					  (org-document-title (:height 1.75) org-document-title)
					  (org-code (:height 1.55) org-code)
					  (org-verbatim (:height 1.55) org-verbatim)
					  (org-block (:height 1.40) org-block)
					  (org-block-begin-line (:height 0.7) org-block)))
  (setq header-line-format " ")
  (org-appear-mode -1)
  (org-display-inline-images)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq-local face-remapping-alist '((default variable-pitch default)))
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images)
  (org-appear-mode 1))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package! org-present
  :bind (:map org-present-mode-keymap
		   ("C-c C-j" . dw/org-present-next)
		   ("C-c C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
     (org-present-mode-quit . dw/org-present-quit-hook)
     (org-present-mode-hook . dw/org-present-start)
     (org-present-mode-quit-hook . dw/org-present-end)))
;; Register hooks with org-present
;; (add-hook 'org-present-mode-hook 'my/org-present-start)
;; (add-hook 'org-present-mode-quit-hook 'my/org-present-end)
#+end_src


#+begin_src emacs-lisp
;;; Theme and Fonts ----------------------------------------

;; ;; Install doom-themes
;; (unless (package-installed-p 'doom-themes)
;;   (package-install 'doom-themes))

;; ;; Load up doom-palenight for the System Crafters look
;; (load-theme 'doom-palenight t)

;; ;; Set reusable font name variables
;; (defvar my/fixed-width-font "JetBrains Mono"
;;   "The font to use for monospaced (fixed width) text.")

;; (defvar my/variable-width-font "Iosevka Aile"
;;   "The font to use for variable-pitch (document) text.")

;; ;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
;; (set-face-attribute 'default nil :font my/fixed-width-font :weight 'light :height 100)
;; (set-face-attribute 'fixed-pitch nil :font my/fixed-width-font :weight 'light :height 110)
;; (set-face-attribute 'variable-pitch nil :font my/variable-width-font :weight 'light)

;;; Org Mode Appearance ------------------------------------

;; Load org-faces to make sure we can set appropriate faces
(require 'org-faces)

;; Hide emphasis markers on formatted text
(setq org-hide-emphasis-markers t)

;; Resize Org headings
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1))))
;; (set-face-attribute (car face) nil :font my/variable-width-font :weight 'medium :height (cdr face)))

;; Make the document title a bit bigger
;; (set-face-attribute 'org-document-title nil :font my/variable-width-font :weight 'bold :height 1.3)

;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;;; Centering Org Documents --------------------------------

;; Install visual-fill-column
(unless (package-installed-p 'visual-fill-column)
  (package-install 'visual-fill-column))

;; Configure fill width
(setq visual-fill-column-width 110
      visual-fill-column-center-text t)

;;; Org Present --------------------------------------------

;; Install org-present if needed
(unless (package-installed-p 'org-present)
  (package-install 'org-present))

(defun my/org-present-prepare-slide (buffer-name heading)
  ;; Show only top-level headlines
  (org-overview)

  ;; Unfold the current entry
  (org-show-entry)

  ;; Show only direct subheadings of the slide but don't expand them
  (org-show-children))

(defun my/org-present-start ()
  ;; Tweak font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 2.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))

  ;; Set a blank header line string to create blank space at the top
  (setq header-line-format " ")

  ;; Display inline images automatically
  (org-display-inline-images)

  ;; Center the presentation and wrap lines
  (visual-fill-column-mode 1)
  (visual-line-mode 1))

(defun my/org-present-end ()
  ;; Reset font customizations
  (setq-local face-remapping-alist '((default variable-pitch default)))

  ;; Clear the header line string so that it isn't displayed
  (setq header-line-format nil)

  ;; Stop displaying inline images
  (org-remove-inline-images)

  ;; Stop centering the document
  (visual-fill-column-mode 0)
  (visual-line-mode 0))

;; Turn on variable pitch fonts in Org Mode buffers
(add-hook 'org-mode-hook 'variable-pitch-mode)

;; Register hooks with org-present
(add-hook 'org-present-mode-hook 'my/org-present-start)
(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+end_src

#+RESULTS:
| my/org-present-prepare-slide |

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

#+RESULTS:
: t

# * Funcs #+begin_src emacs-lisp
# #+end_src

# #+RESULTS:
# : insert-file-name
#
* OpenAI
#+begin_src emacs-lisp
;; if you are using the "pass" password manager
(setq chatgpt-shell-openai-key
        (nth 0 (process-lines "pass" "show" "AI/open")))
(setq openai-key (nth 0 (process-lines "pass" "show" "AI/open")))
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'loa-path "~/.emacs.d/lisp/")
(require 'codegpt)
(require 'chatgpt)
;; (package! chatgtp
;;   :recipe (:host jcs-elpa
;;            :repo "https://jcs-emacs.github.io/jcs-elpa/packages/")) ;; Optional: specify a specific commit or version

;; (package! codegtp)
  ;; :recipe (:host jcs-elpa))
           ;; :repo "https://github.com/emacs-openai/codegpt")) ;; Optional: specify a specific commit or version

;; (package! chatgtp
;;   :recipe
;;   (:host github
;;    :repo "emacs-openai/chatgtp"))
;; (package! codegtp)
#+end_src

#+RESULTS:
: chatgpt

#+begin_src emacs-lisp :tangle packages.el
;; (package! chatgpt-shell
;;   :recipe
;;   (:host github
;;    :repo "xenodium/chatgpt-shell"))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'package-archives '( "jcs-elpa" . "https://jcs-emacs.github.io/jcs-elpa/packages/") t)
(setq package-archive-priorities '(("melpa"    . 5)
                                   ("jcs-elpa" . 0)))
#+end_src

#+RESULTS:
: ((melpa . http://melpa.org/packages/) (org . http://orgmode.org/elpa/) (gnu . https://elpa.gnu.org/packages/) (jcs-elpa . https://jcs-emacs.github.io/jcs-elpa/packages/))

#+begin_src emacs-lisp :tangle packages.el
;; (package! dall-e
;;   :recipe
;;   (:host github
;;    :repo "emacs-openai/dall-e"
;;    :files ("*.el")))

;; (package! chatgpt
;;   :recipe
;;   (:host github
;;    :repo "emacs-openai/chatgpt"
;;    :files ("*.el")))
#+end_src

#+begin_src emacs-lisp
;; (require 'chatgpt-shell)
;; (require 'dall-e-shell)
#+end_src

#+RESULTS:
: dall-e-shell
