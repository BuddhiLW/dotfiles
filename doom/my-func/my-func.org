#+TITLE: Description and motives for each function
#+PROPERTY: header-args:emacs-lisp :mkdirp

* Org roam setup
#+begin_src emacs-lisp :tangle org-roam.el
(setq org-roam-directory "~/buddhi-roam")
#+end_src

#+RESULTS:
: ~/buddhi-roam

* Ein/Babel setup

#+begin_src emacs-lisp :tangle ein-babel.el
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+end_src

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp :tangle ein-babel.el
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (browser . t)
     (ditaa . t)
     (R . t)
     (go . t)
     ;; (ipython . t)
     ;; (julia-vterm . t)
     ;; (julia . t)
     (ein . t)
     (ditaa . t)
     (css . t)
     (lisp . t)
     (latex . t)
     (clojure . t)
     (clojurescript . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src
* Fast Input Method
For the efficient study of =Mandarin=, I change input methods quite often.
Therefore, I use a program to make this change in a key-stroke.

#+begin_src emacs-lisp :tangle fast-input-method.el
;; Input method and key binding configuration.
(setq alternative-input-methods
      '(("pyim" . [?\ß]) ;; chinese-tonepy with autocomplete
        ("chinese-tonepy" . [?\æ])
        ("chinese-sisheng" . [?\ð])))

(setq default-input-method
      (caar alternative-input-methods))

(defun toggle-alternative-input-method (method &optional arg interactive)
  (if arg
      (toggle-input-method arg interactive)
    (let ((previous-input-method current-input-method))
      (when current-input-method
        (deactivate-input-method))
      (unless (and previous-input-method
                   (string= previous-input-method method))
        (activate-input-method method)))))

(defun reload-alternative-input-methods ()
  (dolist (config alternative-input-methods)
    (let ((method (car config)))
      (global-set-key (cdr config)
                      `(lambda (&optional arg interactive)
                         ,(concat "Behaves similar to `toggle-input-method', but uses \""
                                  method "\" instead of `default-input-method'")
                         (interactive "P\np")
                         (toggle-alternative-input-method ,method arg interactive))))))

(reload-alternative-input-methods)
#+end_src

#+RESULTS:

* Fast =Mandarin= and =default= font size change

The bindings for rapidly accessing these commands will live under =config.el=.

#+begin_src emacs-lisp :tangle lw_chdoom.el
(defun lw/chdoom (fontsize)
  (interactive
   (list (read-number "Font size: "
                      (or 30))))
  (set-fontset-font "fontset-default" 'han
                    (font-spec :family "Sarasa Mono Slab HC" :size fontsize)))

;; (set-face-attribute 'default nil :height 200)

(defun lw/defdoom (fontsize)
  (interactive
   (list (read-number "Font size: "
                      (or 200))))
  (set-face-attribute 'default nil :height  fontsize))
#+end_src

* Transparency toggle
#+begin_src emacs-lisp :tangle transparency.el
(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(100 . 0) '(95 . 100)))))

(global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src

#+RESULTS:
: toggle-transparency

* Vocabulary search

#+begin_src emacs-lisp :tangle vocabulary.el
(defun lw/find-vocabulary ()
  (interactive)
  (find-file "~/PP/Notes/vocabulary.org"))

(defun lw/bing-dict-brief (word &optional sync-p)
  "Show the explanation of WORD from Bing in the echo area."
  (interactive
   (let* ((default (if (use-region-p)
                       (buffer-substring-no-properties
                        (region-beginning) (region-end))
                     (let ((text (thing-at-point 'word)))
                       (if text (substring-no-properties text)))))
          (prompt (if (stringp default)
                      (format "Search Bing dict (default \"%s\"): " default)
                    "Search Bing dict: "))
          (string (read-string prompt nil 'bing-dict-history default)))
     (list string)))

  (and bing-dict-cache-auto-save
       (not bing-dict--cache)
       (bing-dict--cache-load))

  (let ((cached-result (and (listp bing-dict--cache)
                            (car (assoc-default word bing-dict--cache)))))
    (if cached-result
        (progn
          ;; update cached-result's time
          (setcdr (assoc-default word bing-dict--cache) (time-to-seconds))
          (message cached-result))
      (save-match-data
        (if sync-p
            (with-current-buffer (url-retrieve-synchronously
                                  (concat bing-dict--base-url
                                          (url-hexify-string word))
                                  t t)
              (bing-dict-brief-cb nil (decode-coding-string word 'utf-8)))
          (url-retrieve (concat bing-dict--base-url
                                (url-hexify-string word))
                        'bing-dict-brief-cb
                        `(,(decode-coding-string word 'utf-8))
                        t
                        t)))))
  (lw/find-vocabulary))
#+end_src

#+RESULTS:
: lw/bing-dict-brief

* LaTeX compiler call
** For minted (shell scape)

#+begin_src emacs-lisp :tangle latex-opt.el
(defun lw/TeX-command-toggle-shell-escape ()
  "toggles the option --shell-escape from the tex command"
  (interactive)
  (setq TeX-command-extra-options
        (cond ((string-match-p "\\_<--shell-escape\\_>" TeX-command-extra-options)
               (replace-regexp-in-string "\\_<--shell-escape\\_>" "" TeX-command-extra-options))
              ((string-empty-p TeX-command-extra-options) "--shell-escape")
              (t (format "--shell-escape %s" TeX-command-extra-options))))
  (message "TeX-command-extra-options : `%s'" TeX-command-extra-options))
#+end_src

#+RESULTS:
: lw/TeX-command-toggle-shell-escape
* Startup dashboard

** The layout of the dashboard

#+begin_src emacs-lisp :tangle splash-layout.el
(defvar fancy-splash-image-template
  (expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 2))
    (:height 250 :min-height 42 :padding (2 . 4))
    (:height 200 :min-height 35 :padding (3 . 3))
    (:height 150 :min-height 28 :padding (3 . 3))
    (:height 100 :min-height 20 :padding (2 . 2))
    (:height 75  :min-height 15 :padding (2 . 1))
    (:height 50  :min-height 10 :padding (1 . 0))
    (:height 1   :min-height 0  :padding (0 . 0)))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as
   described by `fancy-splash-template-colours' for the current theme"
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

** Splash phrases

#+begin_src emacs-lisp :tangle splash-phrase.el
(defvar splash-phrase-source-folder
  (expand-file-name "misc/splash-phrases" doom-private-dir)
  "A folder of text files with a fun phrase on each line.")

(defvar splash-phrase-sources
  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))
         (sets (delete-dups (mapcar
                             (lambda (file)
                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))
                             files))))
    (mapcar (lambda (sset)
              (cons sset
                    (delq nil (mapcar
                               (lambda (file)
                                 (when (string-match-p (regexp-quote sset) file)
                                   file))
                               files))))
            sets))
  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")

(defvar splash-phrase-set
  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))
  "The default phrase set. See `splash-phrase-sources'.")

(defun splase-phrase-set-random-set ()
  "Set a new random splash phrase set."
  (interactive)
  (setq splash-phrase-set
        (nth (random (1- (length splash-phrase-sources)))
             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))
  (+doom-dashboard-reload t))

(defvar splase-phrase--cache nil)

(defun splash-phrase-get-from-file (file)
  "Fetch a random line from FILE."
  (let ((lines (or (cdr (assoc file splase-phrase--cache))
                   (cdar (push (cons file
                                     (with-temp-buffer
                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))
                                       (split-string (string-trim (buffer-string)) "\n")))
                               splase-phrase--cache)))))
    (nth (random (length lines)) lines)))

(defun splash-phrase (&optional set)
  "Construct a splash phrase from SET. See `splash-phrase-sources'."
  (mapconcat
   #'splash-phrase-get-from-file
   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))
   " "))


(defun doom-dashboard-phrase ()
  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."
  (mapconcat
   (lambda (line)
     (+doom-dashboard--center
      +doom-dashboard--width
      (with-temp-buffer
        (insert-text-button
         line
         'action
         (lambda (_) (+doom-dashboard-reload t))
         'face 'doom-dashboard-menu-title
         'mouse-face 'doom-dashboard-menu-title
         'help-echo "Random phrase"
         'follow-link t)
        (buffer-string))))
   (split-string
    (with-temp-buffer
      (insert (splash-phrase))
      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))
      (fill-region (point-min) (point-max))
      (buffer-string))
    "\n")
   "\n"))

#+end_src

** Dashboard render

#+begin_src emacs-lisp :tangle dashboard.el
(load-file (substitute-in-file-name "$HOME/.doom.d/my-func/splash-layout.el"))
(load-file (substitute-in-file-name "$HOME/.doom.d/my-func/splash-phrase.el"))

(defadvice! doom-dashboard-widget-loaded-with-phrase ()
  :override #'doom-dashboard-widget-loaded
  (setq line-spacing 0.2)
  (insert
   "\n\n"
   (propertize
    (+doom-dashboard--center
     +doom-dashboard--width
     (doom-display-benchmark-h 'return))
    'face 'doom-dashboard-loaded)
   "\n"
   (shell-command-to-string "fortune")
   "\n"))
#+end_src

* Diary
#+begin_src emacs-lisp :tangle diary.el
(defconst diary-dir (expand-file-name "~/PP/Notes/Diary/"))

(defun lw/diary-day-entry ()
  (concat diary-dir (shell-command-to-string "echo -n $(date +%Y-%m-%d).org")))

(defun lw/create-or-access-diary ()
  (interactive)
  (if (not (file-exists-p (lw/diary-day-entry)))
      (or (write-region
           (format "#+TITLE: %s" (shell-command-to-string "echo -n $(date +%Y-%m-%d) \n"))
           nil
           (lw/diary-day-entry))
        (find-file (lw/diary-day-entry)))
    (find-file (lw/diary-day-entry))))

;; (defun fzl-create-empty-file-if-no-exist2022-01-16.orgs(filePath)
;;    "Create a file with FILEPATH parameter."
;;    (if (file-exists-p filePath)
;;        (message (concat  "File " (concat filePath " already exists")))
;;      (with-temp-buffer (write-file Pathfile))))
#+end_src
* Navigation to core files
#+begin_src emacs-lisp :tangle goto.el
(defun lw/goto-emacs-org ()
  "Open =Emacs.org= file which maps to init.el."
  (interactive)
  (find-file (expand-file-name "Emacs.org" doom-private-dir)))
  ;; (goto-char
  ;;  (or (save-excursion
  ;;        (goto-char (point-min))
  ;;        (search-forward "(doom!" nil t))
  ;;      (point))))

(defun lw/goto-my-func-org ()
  "Open =my-func.org= file which maps to homecooked function."
  (interactive)
  (find-file (expand-file-name "my-func/my-func.org" doom-private-dir)))
#+end_src
* Ispell
#+begin_src emacs-lisp
(use-package! ispell
  :config
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "en_US,pt_BR")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,pt_BR"))
#+end_src

#+RESULTS:
: t
