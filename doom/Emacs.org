#+TITLE: Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el

* Base
** DOOM initial setup
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Pedro Branquinho"
      user-mail-address "pedrogbranquinho@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'ewal-doom-vibrant)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Default face size
(set-face-attribute 'default nil :height 170)

;; Tecosaur snippet -- start --

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 2)                            ; It's nice to maintain a little margin

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words

;; Tecosaur snippet -- end --

(use-package! csv-mode)

;; (use-package! undo-tree)

(load! "./my-func/fast-input-method.el")
(load! "./my-func/org-roam.el")

(use-package! impatient-mode)


;; (use-package! org-roam
;;         :config
;;         (org-roam-directory "~/buddhi-roam")
;;         :bind! (("C-c n l" . org-roam-buffer-toggle
;;                  ("C-c n f" . org-roam-node-find)
;;                  ("C-c n g" . org-roam-graph)
;;                  ("C-c n i" . org-roam-node-insert)))
;;         :config
;;         (org-roam-db-autosyc-mode)
;;         (require 'org-roam-protocol))
#+end_src

** Window management
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

#+RESULTS:

** Initial screen

#+begin_src emacs-lisp
(load! "./my-func/dashboard.el")
#+end_src

#+RESULTS:
: t

Lastly, the doom dashboard "useful commands" are no longer useful to me.
So, we'll disable them and then for a particularly /clean/ look disable
the modeline and ~hl-line-mode~, then also hide the cursor.

#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Transparency
#+begin_src emacs-lisp
(load! "./my-func/transparency.el")
#+end_src

#+RESULTS:
: t

** Org
#+begin_src emacs-lisp
(use-package! org
  :config
  (setq org-ellipsis " ▾")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files
        '("~/PP/Notes/Agenda/Tasks.org"
          "~/PP/Notes/Agenda/Habits.org"
          "~/PP/Notes/Agenda/IMPA.org"
          "~/PP/Notes/Agenda/ProcSel.org"
          "~/PP/Notes/Agenda/University.org"
          "~/PP/Notes/Agenda/Research.org"
          "~/PP/Notes/Agenda/CafeDoBem")))
#+end_src

* Shortcuts to load modules, as needed

To create new loadable modules,

#+begin_src emacs-lisp
(load! "./my-func/define-modules.el")
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/load-modules.el")
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("l" . "load module")
        :desc "Chinese" "c" #'lw/load-chinese
        :desc "LaTeX" "l" #'lw/load-latex)))
#+end_src

#+RESULTS:
: lw/load-latex

* Anaconda
#+begin_src emacs-lisp
;; (use-package! conda
;;   :config
;;   (setq
;;    conda-env-home-directory (expand-file-name "~/.conda/")
;;    conda-env-subdirectory "envs")
;;   (custom-set-variables '(conda-anaconda-home "/opt/anaconda/"))
;;   (conda-env-initialize-interactive-shells)
;;   (conda-env-initialize-eshell)
;;   (conda-env-autoactivate-mode t))
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/ein-babel.el")
#+end_src

#+RESULTS:
: t

* Maps
** Font resize
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("f" . "font")
        :desc "New default size" "d" #'lw/defdoom
        :desc "New ch-default size" "c" #'lw/chdoom)))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :desc "Yank history" "y" #'consult-yank-from-kill-ring)
#+end_src

* Elfeed
#+begin_src emacs-lisp
(setq elfeed-feeds
      '("https://www.democracynow.org/democracynow.rss"
        "http://docuwiki.net/index.php?title=Special:Newpages&feed=rss"
        "https://www.inovacaotecnologica.com.br/boletim/rss.php"
        "http://feeds.nbcnews.com/feeds/topstories"))

;; '("http://nullprogram.com/feed/")
;; "https://planet.emacslife.com/atom.xml"
;; "https://arxiv.org/search/?query=physics+informed+neural+network&searchtype=all&source=header"
#+end_src

#+RESULTS:
| https://www.democracynow.org/democracynow.rss | http://docuwiki.net/index.php?title=Special:Newpages&feed=rss | https://www.inovacaotecnologica.com.br/boletim/rss.php | http://feeds.nbcnews.com/feeds/topstories |

* Org-ref
#+begin_src emacs-lisp
;; (use-package! helm-bibtex)

;; (use-package! gscholar-bibtex)

;; (use-package! bibtex-completion)

;; (use-package! org-ref
;;   :config
;;   (require 'org-ref-helm)
;;   (require 'org-ref-arxiv)
;;   (require 'org-ref-scopus)
;;   (require 'org-ref-wos)
;;   (map! :leader
;;         (:prefix-map ("b" . "buddhi")
;;          (:prefix ("l" . "latex")
;;           (:prefix ("i" . "insert")
;;            :desc "Bib-citation" "c" #'org-ref-insert-link
;;            :desc "Auto-ref" "r" #'org-ref-insert-ref-link
;;            :desc "Arxiv Search" "s" #'arxiv-search
;;            :desc "Arxiv Download" "d" #'arxiv-download-pdf-export-bibtex
;;            :desc "GScholar Search" "g" #'gscholar-bibtex))))
;;   (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")))
#+end_src

#+begin_src emacs-lisp
;; (use-package! arxiv-mode
;;   :config
;;   (setq arxiv-default-download-folder
;;         (substitute-in-file-name "$HOME/Documents/Reseach/"))
;;   (setq arxiv-default-bibliography
;;         (substitute-in-file-name "$HOME/Bibliography/collection.bib")))
#+end_src

* Revert buffer
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Revert buffer" "r" #'revert-buffer))
#+end_src

#+RESULTS:
: revert-buffer

* Celestial-mode-line
#+begin_src emacs-lisp
(use-package! celestial-mode-line
  :config
  (setq calendar-longitude "20.54S")
  (setq calendar-latitude "47.40W")
  (setq calendar-location-name "Franca, SP")
  (defvar celestial-mode-line-phase-representation-alist '((0 . "○") (1 . "☽") (2 . "●") (3 . "☾")))
  (defvar celestial-mode-line-sunrise-sunset-alist '((sunrise . "☀↑ ") (sunset . "☀↓ ")))
  (defvar celestial-mode-line-phase-representation-alist '((0 . "( )") (1 . "|)") (2 . "(o)") (3 . "|)")))
  (defvar celestial-mode-line-sunrise-sunset-alist '((sunrise . "*^") (sunset . "*v")))
  (celestial-mode-line-start-timer))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(defun lw/sunset ()
  (interactive)
  (display-message-or-buffer (message "`%s'" (solar-sunrise-sunset-string (calendar-current-date)))))

(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Sunrise sunset info" "µ" #'lw/sunset))
#+end_src

#+RESULTS:
: lw/sunset

* Roam
#+begin_src emacs-lisp
(use-package! deft
  :bind ("<f2>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/buddhi-roam/"
                deft-extensions '("md" "org"))
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory))
#+end_src

#+RESULTS:
: deft
* PDFs in Emacs
#+begin_src emacs-lisp
(use-package! pdf-tools)
#+end_src
* Programming Languages
** LaTeX
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 3.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |
** Julia

* ERC/IRC Twitch

#+begin_src emacs-lisp
(use-package! erc-hl-nicks)
(use-package! erc-colorize)

(use-package! erc-twitch
  :config
  (add-hook! erc-twitch-mode-hook #'erc-colorize-enable)
  (add-hook! erc-twitch-mode-hook #'erc-hl-nicks-enable))
#+end_src

#+RESULTS:
: erc-colorize
* Pass
#+begin_src emacs-lisp
(use-package! hidepw)
#+end_src

#+RESULTS:
: hidepw

#+begin_src emacs-lisp
(use-package! helm-pass)
#+end_src

#+RESULTS:
: helm-pass

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Password list" "p" #'helm-pass))
#+end_src

#+RESULTS:
: helm-pass
* Navigation
#+begin_src emacs-lisp
(load! "./my-func/goto.el")
#+end_src

#+begin_src emacs-lisp
(load! "./my-func/diary.el")
#+end_src

** Diary

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       :desc "Diary entry" "d" #'lw/create-or-access-diary))
#+end_src
** Evil Deeds

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Evil Deeds" "n" #'lw/find-evildeeds)))
#+end_src

#+RESULTS:
: lw/find-evildeeds

** Function definitions
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Function at point" "f" #'find-function-at-point)))
#+end_src

#+RESULTS:
: find-function-at-point
** Go to =Emacs.org= and =my-func.org=


#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Emacs.org" "e"  #'lw/goto-emacs-org
        :desc "my-func.org" "F" #'lw/goto-my-func-org)))
#+end_src

#+RESULTS:
: lw/goto-my-func-org
** Navigate to books

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Active CS book" "a"  #'lw/goto-cs-active
        :desc "CS books" "c" #'lw/goto-cs-books)))
#+end_src

#+RESULTS:
: lw/goto-cs-books
** Navigate to book notes
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("n" . "navigate to")
        :desc "Book notes" "n"  #'lw/goto-book-notes)))
#+end_src

* Magit
#+begin_src emacs-lisp
(map! :leader
      :desc "Magit" "m" #'magit)
#+end_src

* Proof General and Coq
#+begin_src emacs-lisp
;; (use-package! company-coq)
;; (use-package! coq-commenter)
;; (use-package! proof-general
;;   :config
;;   (add-hook! 'coq-mode-hook #'company-coq-mode)
;;   (add-hook! 'coq-mode-hook #'coq-commenter-mode))
#+end_src

#+RESULTS:
: t

* Elm
#+begin_src emacs-lisp
(use-package! elm-mode
  :hook (elm-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode | elm-indent-mode |

#+begin_src emacs-lisp
;; (use-package! elm-oracle
;;   :config
;; (with-eval-after-load 'company
;;         (add-to-list 'company-backends 'company-elm))
;; (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
#+end_src

#+begin_src shell
npm install -g elm-oracle
#+end_src

* Comment Julia

# #+begin_src emacs-lisp
# (setq inferior-julia-program-name "julia")
# #+end_src

# #+RESULTS:
# : julia

# #+begin_src emacs-lisp
# (package! julia-vterm
#   :recipe (:host github
#            :repo "shg/julia-vterm.el"))

# (package-install-file "~/.doom.d/julia-vterm.el/julia-vterm.el")

# (package! ob-julia-vterm
#   :recipe (:host github
#            :repo "shg/ob-julia-vterm.el"))

# (package-install-file "~/.doom.d/ob-julia-vterm.el/ob-julia-vterm.el")

# (package! ob-julia
#   :recipe (:host github
#            :repo "gjkernsx/ob-julia"))

# ;; (package-install-file "~/.doom.d/ob-julia/ob-julia.el")

# (add-hook 'julia-mode-hook #'julia-vterm-mode)
# (setq julia-vterm-repl-program "/usr/bin/julia -t 4")

# (require 'org)
# (add-to-list 'org-babel-load-languages '(julia-vterm . t))
# (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
# (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
# #+end_src

# #+begin_src emacs-lisp
# (add-to-list 'load-path "~/.doom.d/ob-julia/ob-julia.el")
# #+end_src

# To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

# #+begin_src emacs-lisp
# ;; (with-eval-after-load 'org
# ;;   (org-babel-do-load-languages
# ;;    'org-babel-load-languages
# ;;    '((emacs-lisp . t)
# ;;      (python . t)
# ;;      (browser . t)
# ;;      (ditaa . t)
# ;;      (R . t)
# ;;      (go . t)
# ;;      ;; (ipython . t)
# ;;      (julia-vterm . t)
# ;;      ;; (julia . t)
# ;;      (ein . t)
# ;;      (ditaa . t)
# ;;      (css . t)
# ;;      (lisp . t)
# ;;      (latex . t)
# ;;      (clojure . t)
# ;;      (clojurescript . t)))
# ;;   (push '("conf-unix" . conf-unix) org-src-lang-modes))
# #+end_src

# #+begin_src emacs-lisp
# (custom-set-variables
#  '(ob-ein-languages
#    '(("ein-python" . python)
#      ("ein-R" . R)
#      ("ein-r" . R)
#      ("ein-julia" . julia))))
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
# (use-package julia-mode)
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
# (use-package julia-snail)
# #+end_src

# #+RESULTS:

# #+begin_src emacs-lisp
#    (setq inferior-julia-program-name "julia")
# #+end_src
* Web browser
#+begin_src emacs-lisp
(use-package! eaf
  :load-path "~/.doom.d/site-lisp/emacs-application-framework"
  :custom
  ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)
  :config
  (defalias 'browse-web #'eaf-open-browser))
  ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.doom.d/site-lisp/emacs-application-framework/")
#+end_src

#+RESULTS:
| ~/.doom.d/site-lisp/emacs-application-framework/ | ~/.doom.d/sit |

#+begin_src emacs-lisp
(require 'eaf)
(require 'eaf-browser)
#+end_src

#+RESULTS:
: eaf-browser
* Python
** Anaconda
#+begin_src emacs-lisp
(use-package! conda
  :config
  (setq
   conda-env-home-directory (expand-file-name "~/opt/anaconda2/")
   conda-env-subdirectory "envs/")
  (custom-set-variables '(conda-anaconda-home "/opt/anaconda2/"))
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode t))
#+end_src

* Xthemes
#+begin_src emacs-lisp
(use-package! ewal-doom-themes)
(use-package! doom-themes)
(use-package! doom-modeline-now-playing)
(use-package! doom-modeline)
#+end_src

#+RESULTS:
: doom-modeline
* W3M
#+begin_src emacs-lisp
(use-package! w3m
  :config
  (setq w3m-search-default-engine "duckduckgo"))
#+end_src

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("b" . "buddhi")
       (:prefix ("s" . "search")
        :desc "w3m search" "s" #'w3m-search)))
#+end_src

#+RESULTS:
: w3m-search
